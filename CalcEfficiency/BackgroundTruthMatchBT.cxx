#ifndef LARLITE_BACKGROUNDTRUTHMATCHBT_CXX
#define LARLITE_BACKGROUNDTRUTHMATCHBT_CXX

#include "TH1D.h"
#include "TDirectory.h"

#include "BackgroundTruthMatchBT.h"
#include "DataFormat/mctruth.h"
#include "DataFormat/mcshower.h"
#include "DataFormat/mctrack.h"
#include "DataFormat/track.h"
#include "DataFormat/shower.h"
#include "DataFormat/vertex.h"
#include "DataFormat/cluster.h"
#include "DataFormat/opflash.h"
#include "DataFormat/hit.h"
#include "DataFormat/mceventweight.h"

#include "LArUtil/GeometryHelper.h"

namespace larlite {

  bool BackgroundTruthMatchBT::initialize() {    

    _event = -1; 

    //_N    = 0 ;
    //_N_xsec    = 0 ;

    _n_noise = 0;    // 0
    _n_cosmic = 0;   // 1         
    _n_cc1pi0 = 0;   // 2
    _n_nc1pi0 = 0;   // 3
    _n_cc1pi0_outFV = 0;  // 4
    _n_multpi0 = 0;  // 5
    _n_nue = 0;      // 6 
    _n_antimu  = 0;   // 7
    _n_cccex = 0;    // 8
    _n_nccex = 0;    // 9
    _n_ccother = 0;  // 12
    _n_ncother = 0;  // 13
    _n_other = 0;    // 14 

    // After thoughts 
    _1gamma = 0;
    _n_gamma = 0 ; // 10
    _n_kaondecay = 0 ; // 11

    //SetXOffset(0.0);
    _SCE = new larutil::SpaceChargeMicroBooNE();
    _time2cm = larutil::GeometryHelper::GetME()->TimeToCm();

    if ( _get_genie_info && _eventweight_producer == "fluxeventweight"){

      int  funcs = 6;
      _xsec_v.resize(funcs);
      _perc_v.resize(funcs);
      _s_weights_by_universe.resize(funcs);
      _b_weights_by_universe.resize(funcs);
      _flux_by_universe.resize(funcs);

      for ( int i = 0; i < funcs ; i++ ){
        _s_weights_by_universe.at(i).resize(1000,0) ;
        _b_weights_by_universe.at(i).resize(1000,0) ;
        _flux_by_universe.at(i).resize(1000,0) ;
        _xsec_v.at(i).resize(1000,0);
        _perc_v.at(i).resize(1000,0);
      }
       std::cout<<"ENTERING ! "<<std::endl ;
  
       TFile * f = new TFile("/uboone/app/users/jaz8600/FastFluxFiles/MCC8_FluxHistograms_Uncertainties.root");
       TDirectory *C_dir_numu = (TDirectory*) f-> Get("numu");

       TH1D * hcv = (TH1D*) C_dir_numu->Get("numu_CV_AV_TPC") ;
       hcv->Scale(0.492*1e20/(2.43e11)/(256.35 * 233.));
       
       TDirectory *C_dir_unisim = (TDirectory*) C_dir_numu -> Get("FluxUnisim");
       TDirectory *C_dir_av  = (TDirectory*) C_dir_unisim -> Get("Active_TPC_Volume");
       TDirectory *piplus = (TDirectory*) C_dir_numu -> Get("piplus");
       TDirectory *piplus_av = (TDirectory*) piplus -> Get("Active_TPC_Volume");
       TDirectory *piminus = (TDirectory*) C_dir_numu -> Get("piminus");
       TDirectory *piminus_av = (TDirectory*) piminus -> Get("Active_TPC_Volume");
       TDirectory *kplus = (TDirectory*) C_dir_numu -> Get("kplus");
       TDirectory *kplus_av = (TDirectory*) kplus -> Get("Active_TPC_Volume");
       TDirectory *kminus = (TDirectory*) C_dir_numu -> Get("kminus");
       TDirectory *kminus_av = (TDirectory*) kminus -> Get("Active_TPC_Volume");
       TDirectory *kzero = (TDirectory*) C_dir_numu -> Get("kzero");
       TDirectory *kzero_av = (TDirectory*) kzero -> Get("Active_TPC_Volume");

       for( int j =0; j < 6; j++){
         std::cout<<"New funtion ! "<<std::endl ;
         for(int i = 0; i < 1000; i++){

           // Non-hadron pieces
           if ( j == 0 ) { 
             TH1D * h1 = (TH1D*) C_dir_av->Get(Form("numu_FluxUnisim_Uni_%d_AV_TPC",i)) ;
             h1->Scale(0.492*1e20/(2.43e11)/(256.35 * 233.));
             _flux_by_universe[j][i] = h1->Integral() ; 
           }
           else if ( j == 1 ){
             TH1D * h1 = (TH1D*) kplus_av->Get(Form("numu_kplus_Uni_%d_AV_TPC",i)) ;
             h1->Scale(0.492*1e20/(2.43e11)/(256.35 * 233.));
             _flux_by_universe[j][i] = h1->Integral() ; 
           }
           else if ( j == 2 ){
             TH1D * h1 = (TH1D*) kminus_av->Get(Form("numu_kminus_Uni_%d_AV_TPC",i)) ;
             h1->Scale(0.492*1e20/(2.43e11)/(256.35 * 233.));
             _flux_by_universe[j][i] = h1->Integral() ; 
           }
           else if ( j == 3 ){
             TH1D * h1 = (TH1D*) kzero_av->Get(Form("numu_kzero_Uni_%d_AV_TPC",i)) ;
             h1->Scale(0.492*1e20/(2.43e11)/(256.35 * 233.));
             _flux_by_universe[j][i] = h1->Integral() ; 
           }
           else if ( j == 4 ){ 
             TH1D * h1 = (TH1D*) piplus_av->Get(Form("numu_piplus_Uni_%d_AV_TPC",i)) ;
             h1->Scale(0.492*1e20/(2.43e11)/(256.35 * 233.));
             _flux_by_universe[j][i] = h1->Integral() ; 
           }
           else if ( j == 5 ) { 
             TH1D * h1 = (TH1D*) piminus_av->Get(Form("numu_piminus_Uni_%d_AV_TPC",i)) ;
             h1->Scale(0.492*1e20/(2.43e11)/(256.35 * 233.));
             _flux_by_universe[j][i] = h1->Integral() ; 
           }
         }
       }
      delete f ;
     }


    _unisim_label_v = {"SkinEffect","HornCurrent","NucleonInXsec","NucleonQEXsec","NucleonTotXsec","piInelasticXsec","piInelasticXsec","piQEXsec","piTotalXsec"};
   _label_map = { {"K+", 1} , {"K-",2}, {"K0",3}, {"pi+",4}, {"pi-",5} } ;
  _t_weights_by_universe = {{7784.65, 7189.23, 8778.67, 6889.54, 6957.84, 7924.88, 8269.64, 6655.98, 8154.57, 8527.75, 8625.58, 8167.17, 7715.3, 8561.39, 8070.89, 7846.54, 7161.69, 8120.83, 7868.69, 7668.8, 7581.01, 7419.67, 7167.11, 7631.56, 7257.66, 7306.09, 8253.55, 8115.82, 8582.25, 7299.04, 7766.49, 7955.55, 8051.36, 7064.4, 7411.58, 7727.86, 8102.18, 8064.97, 8151.68, 7975.43, 7668.11, 7627.51, 7573.63, 7893.22, 7543.84, 6908.91, 7563.87, 7139.29, 7033.21, 6646.1, 7468.51, 7672.42, 7367.42, 7818.41, 7668.68, 7924.17, 8052.18, 7044.1, 8397.47, 7483.06, 7884.14, 7589.18, 7986.28, 8096.16, 8266.15, 7745, 7719.84, 6761.28, 7973.25, 8106.57, 7725.29, 9258.13, 7754.42, 8508.41, 6881.14, 7957.74, 8345.17, 7088.32, 8641.75, 7846.06, 8465.32, 7622.12, 7468.08, 8253.56, 7024.89, 6801.8, 7581.39, 7846.53, 7347.66, 7507.05, 7412.81, 7309.11, 7851.2, 7048.52, 7648.12, 6514.24, 7052.61, 7303.25, 7672.65, 6997.28, 7363.98, 7048.32, 7649.4, 7142.62, 7118.7, 7464.03, 6996.96, 7383.79, 7368.74, 7870.22, 7455.63, 8017.73, 7439.17, 8062.52, 7773.46, 7149.97, 7412.78, 7437.12, 7350.37, 8041.8, 7488.19, 7498.8, 7028.96, 6939.81, 8535.26, 7731.24, 7304.02, 7384.4, 8472.88, 6903.74, 8105.28, 8631.61, 7344.12, 7568.31, 7545.92, 7419.39, 7360.01, 7609.93, 8280.56, 7428.2, 8155.2, 7598.4, 7721.58, 8588.17, 7513.47, 8113.66, 8141.69, 6933.89, 7830.55, 7688.16, 8315.71, 8011.83, 8401.09, 7998.07, 7511.85, 7100.27, 7372.6, 6620.04, 8022.08, 7740.27, 8289.69, 6971.95, 7505.7, 8397.74, 8065.13, 7160.72, 7811.01, 8273.96, 8004.48, 9148.58, 7659.56, 8321.15, 7322.53, 7738.61, 7992.26, 7864.1, 7759.41, 8127.74, 6930.2, 7029.04, 7147.06, 7475.31, 7155.95, 7601.94, 7362.7, 7734.31, 7831.01, 8354.01, 7919.4, 7370.87, 7334.56, 8104.21, 7891.79, 6766.29, 7425.72, 6501.38, 6581.76, 7053.09, 8545.62, 7053.23, 7718.21, 7854.96, 7989.42, 7972.21, 7311.37, 7720.26, 7761.82, 8102.13, 7749.39, 6985.48, 7545.91, 8053.74, 7635.8, 8242.81, 8601.56, 7203.55, 7593.42, 7714.73, 7083.67, 8394.84, 7395.6, 6932.47, 7099, 6728.78, 7649.13, 7948.41, 8012.3, 7684.55, 7475.41, 7419.15, 7995.31, 7399.28, 7663.7, 7716.99, 7473.96, 7213.69, 7988.99, 7371.78, 7727.27, 7508.41, 7212.17, 7535.47, 7516.47, 8039.94, 7536.99, 8185.58, 7945.5, 7169.44, 7697.59, 7665.94, 7233.08, 7858.06, 7735.98, 7341.34, 7550.04, 7489.29, 7390.11, 7076.75, 7575.68, 7248.78, 8185.61, 7805.24, 6693.66, 6844.58, 7246.01, 7795.86, 7159.25, 8008.14, 7631.25, 8441.98, 7269.64, 7587.04, 6880.86, 8058.21, 7786.68, 8258.6, 8169.09, 7814.81, 7523.16, 7003.72, 7831.96, 6871.81, 7153.31, 7534.96, 7958.46, 7962.84, 6796.12, 7837.24, 7291.73, 7911.48, 8106.26, 7855.2, 7837.64, 7937.36, 7535.04, 6968.23, 6657.29, 7380.77, 7963.63, 7474.31, 7513.37, 6870.66, 8195.48, 7553.29, 7720.73, 7476.39, 7665.17, 7580.09, 7206.08, 7350.2, 7309.03, 8723.59, 7795.41, 7530.49, 7515.58, 7465.34, 6890.21, 6428.1, 7393.55, 7368.9, 6485.97, 8316.09, 7506.29, 7958.82, 7608.99, 8577.31, 8130.09, 7896.98, 7492, 7314.9, 7847.68, 7368.48, 7801.73, 8125.14, 6294.21, 7180.81, 7239.78, 8354.44, 6775.72, 8205.83, 7402.51, 7874.91, 6758.46, 7213.35, 8042.64, 7378.22, 7487.48, 7903.85, 7831.79, 7331.27, 7870.82, 8066.44, 6937.99, 8508.21, 8469.13, 7333.78, 7799.86, 8137.39, 8159.15, 7893.02, 7789.21, 8237.38, 7290.56, 7582.77, 7130.7, 8495.74, 7659.43, 7326.92, 8148.3, 8366.73, 6852.41, 6951.09, 7265.11, 7813.21, 7643.21, 7768.22, 7973.65, 7927.22, 8499.98, 8418.52, 7912.82, 7017.87, 7732.61, 7976.38, 7712.45, 8281.58, 7558.32, 8256.67, 7488.06, 8215.9, 8452.42, 7091.73, 6744.22, 7215.07, 7506.45, 6502.57, 7632.04, 8397.7, 7782.94, 8145.52, 6882.26, 7405.07, 7496.48, 7116.23, 8378.41, 7242.78, 7534.31, 7819.95, 7359.62, 7625.5, 7670.08, 8279.76, 7126.8, 7850.46, 7544.54, 7823.94, 6946.98, 7519.59, 7787.06, 8061.28, 7367.9, 8621.88, 7537.57, 7696.04, 7550.44, 7379.98, 7996.36, 7473.45, 7071.36, 7294.83, 7933.7, 7826.18, 7838.11, 7454.75, 8535.07, 7720.09, 7589.17, 7601.53, 7964.03, 7555.84, 7229.87, 7196.89, 7343.2, 8131.83, 6910.29, 7408.29, 8379.82, 8061.91, 7144.11, 7553.08, 7460.29, 7460.22, 7415.84, 7958.3, 7927.69, 7799.64, 8096.99, 7206.07, 7287.12, 6324.52, 8210.05, 7022.64, 7326.62, 7603.25, 6697.97, 7442.27, 8066.75, 8121.5, 7704.72, 7621.71, 7875.36, 7056.03, 8386.49, 8472.07, 8716.3, 8019.32, 8152.48, 7351.21, 8059.74, 7344.64, 7553.35, 7680.5, 8716.24, 6720.32, 7339.9, 8575.88, 7805.17, 7804.48, 7814.08, 7102.16, 7401.34, 7485.94, 6773.08, 8433.91, 7923.23, 8108.54, 7069.6, 7756.2, 7850.71, 8399.88, 8358.25, 7353.46, 7395.8, 7558.28, 7263.79, 7387.15, 9098.18, 8022.31, 7451.21, 6538.25, 6720.55, 7414.4, 7413.38, 7577.03, 8279.75, 6700.97, 7992.9, 7392.72, 6564.24, 8690.77, 7690.8, 7349.6, 7978.11, 7098.92, 7727.15, 7488.67, 8234.38, 7029.1, 7103.63, 7737.97, 7564.12, 6955.12, 7594.39, 7385.29, 6590.5, 7494.21, 6989.13, 7750.04, 7376.32, 7553.67, 7228.41, 7375.5, 7137.12, 8500.75, 7402.79, 7929.08, 8192.68, 7566.73, 6835.89, 7699.61, 7593.91, 7603.2, 7108.4, 7168.22, 6714.75, 7586.45, 7274.64, 7830.64, 7120.45, 6910.76, 7253.54, 7302.78, 6887.42, 8329.53, 8094.86, 7318.98, 7270.01, 7803.45, 7488.33, 6587.39, 6964.29, 7523.73, 7587.36, 8690.16, 6841.56, 7507.24, 6612.98, 7238.32, 8339.02, 8302.96, 8017.28, 7330.64, 6985.18, 8511.49, 6954.27, 7283.88, 8012.85, 7634.26, 7873.29, 7740.04, 8729.86, 8628.08, 7353.38, 7823.73, 8778.53, 7734.04, 7653.89, 6783.85, 7141.95, 7846.43, 7210.75, 7915.74, 8367.02, 7572.27, 7555.8, 7774.3, 7161.7, 7775.71, 6891.31, 7865.66, 8382.53, 7529.59, 6813.4, 8106.83, 7072.59, 8290, 7834.97, 7216.71, 7940.31, 8264.86, 8385.49, 8382.36, 7181.62, 8305.42, 7943.39, 8088.1, 7530.27, 7354.61, 7935.08, 7930.8, 7411.91, 7631.02, 7860.08, 7625.75, 8776.21, 7182.9, 6817.38, 7975.83, 7424.38, 6733.45, 8124.51, 7783.65, 7669.02, 8296.32, 7442.05, 8141.61, 7452.68, 7215.63, 7845.25, 6916.16, 7139.06, 7722.8, 8317.69, 8016.92, 8472.49, 7465.1, 7369.54, 8150.73, 7340.18, 7225.82, 7525.24, 7608.88, 8713.92, 7388.82, 8135.5, 6981.21, 7385.54, 7227.93, 7783.58, 7097.73, 7474.83, 7667.2, 7786.18, 8010.02, 6466.74, 7861.07, 8260.12, 7860.96, 7250.89, 7051.75, 7983.34, 7846.07, 7809.59, 8042.86, 8066.78, 7451.38, 6642.61, 7608.22, 7267.48, 7824.18, 7033.7, 7806.38, 8569.42, 8250.92, 7668.78, 7575.25, 7522.82, 8554.59, 7540.32, 7282.26, 7324.56, 7813.74, 6935.44, 7005.99, 9024.91, 7585.26, 8143.42, 6861.77, 7454.25, 7223.05, 7532.61, 8027.47, 7155.55, 8535.08, 8373.81, 8230.24, 7744.1, 8069.75, 7954.28, 8222.27, 7427.59, 8324.15, 8312.45, 7526.81, 7951.25, 8115.67, 7795.69, 7517.6, 7423.41, 7066.4, 7176.56, 7651.91, 7394.02, 7832.84, 8780.83, 8508.88, 6567.56, 7784.47, 8605.29, 7577.29, 7151.44, 7535.16, 8112.66, 7886.56, 7409.78, 8576.97, 6923.64, 7430.45, 7556.11, 8000.96, 8227.93, 7723.23, 7004.06, 8204.81, 7613.29, 7151.51, 7198.26, 8228.38, 6922.51, 7258.84, 6764.05, 7733.9, 7195.79, 8498.51, 8036.26, 7784.51, 8658.2, 8074.24, 8192.61, 6480.43, 8464.53, 7882.83, 7299.89, 6655.63, 7166.02, 7777.72, 7061.72, 7446.38, 7728.57, 8052.74, 8021.36, 8591.28, 7274.02, 8564.59, 6968.49, 7577.1, 6510.02, 7746.54, 7354.01, 7770.35, 8010.17, 7376.82, 7507.05, 7429.68, 7949.01, 8035.91, 7291.15, 7037.08, 7053.63, 7483.6, 7473.45, 7070.56, 7160.73, 8184.78, 7002.99, 8154.82, 7816.27, 6917.49, 7453.4, 8500.95, 7822.96, 7052.75, 7345.32, 7275.44, 7998.19, 7977.67, 8515.58, 8232.33, 8073.83, 7053.32, 7377.87, 7846.06, 7106.17, 7932.07, 6586.31, 7637.26, 7971.58, 7189.46, 7647.69, 6850.01, 7924.84, 7568.24, 7553.9, 7551.26, 7444.97, 6808.99, 7622.6, 7475.12, 8028.15, 7661.5, 7614.14, 7408.37, 8157.88, 7047.07, 7361.1, 7879.89, 7214.48, 7265.75, 8501.91, 7196.09, 7604.81, 7342.74, 8217.33, 7608.64, 8049.98, 8063.76, 7808.19, 8164.05, 7695.28, 7080.55, 7075.02, 7962.77, 7541.87, 7689.17, 7260.44, 6815.07, 6617.78, 7428.83, 7990.01, 7672.81, 7123.11, 8310.82, 8087.25, 6966.4, 6555.86, 7550.74, 8464.6, 7190.06, 7320.02, 7805.69, 7825.89, 7886.97, 7575.15, 7696.18, 7336.7, 7234.23, 8277.17, 7431.56, 7224.73, 7217.38, 7182.15, 7715.13, 8362.79, 8576.67, 7887.54, 8207.63, 7334.78, 8273.78, 7489.97, 8440.23, 7612.79, 7002.07, 6868.08, 7726.6, 7154.11, 7355.03, 7186.21, 8401.4, 6995.23, 8139.57, 8037.83, 7833.62, 8432.12, 7523.35, 8152.15, 8126.98, 7242.15, 7597.42, 7455.97, 7312.82, 8527.56, 7587.06, 8969.69, 6633.94, 7652.03, 7540.67, 7657.67, 7386.97, 8099.23, 8123.55, 8116.21, 7353.96, 7116.56, 7328.09, 6785.56, 7267.09, 8091.88, 7210.56, 7693.25, 7465.15, 7711.18, 8434.86, 7360.43, 6600.88, 7115.42, 8686.54, 7465.75, 7660.7, 6983.72, 8069.4, 6707.78, 8868.17, 7049.81, 7172.75, 7977.02, 8164.32, 8448.7, 7456, 7685.51, 8005.86, 8458.02, 7454.99, 8012.05, 7080.89, 7752.65, 7206.46, 7642.95, 7737.08, 8376.67, 7707.68, 7934.17, 7555.23, 7459.35, 7905.05, 7101.74, 7892.15, 7530.45, 6559.1, 8321.08, 7943.32, 7959.81, 7264.33, 6944.59, 8487.21, 7985.63, 6475.4, 7653.4, 7262.11, 8356.36, 7906.25, 8038.2, 7278.99, 7241.27, 6689.81, 7285.46, 7851.11, 7392.2, 7344.39, 7479.67, 7909.48},{7533.01, 7562.86, 7547.92, 7625.85, 7612.1, 7594.4, 7568.94, 7536.68, 7512.59, 7465.29, 7665.24, 7406.81, 7540.74, 7544.36, 7526.14, 7578.67, 7532.38, 7601.44, 7587.75, 7623.03, 7597.54, 7613.14, 7547.08, 7551.32, 7627.41, 7545.4, 7669.85, 7508.12, 7452.41, 7676.3, 7502.86, 7462.24, 7594.46, 7631.52, 7645.14, 7565.7, 7594.74, 7524.48, 7608.81, 7513.38, 7566.37, 7466.86, 7611.72, 7540.58, 7570.23, 7553.73, 7514.44, 7516.95, 7596.65, 7555.02, 7551.19, 7655.78, 7589.92, 7531.15, 7438.86, 7539.51, 7610.45, 7522.92, 7508.97, 7557.45, 7553.95, 7637.1, 7698.13, 7631.51, 7608.03, 7530.02, 7599.25, 7567.71, 7595.67, 7523.53, 7496.16, 7546.83, 7502.85, 7496.64, 7601.14, 7669.8, 7568.62, 7557.33, 7483.16, 7617.79, 7567.24, 7523.41, 7685.88, 7545.38, 7629.33, 7512.63, 7480.33, 7503.7, 7455.38, 7575.17, 7485.27, 7531.82, 7695.36, 7492.2, 7570.43, 7497.86, 7573.49, 7674.36, 7653.91, 7594.46, 7559.79, 7528.68, 7583.38, 7600.96, 7587.72, 7476.22, 7599.97, 7568.54, 7603.84, 7598.81, 7688.89, 7510.6, 7563.19, 7637.85, 7502.64, 7603.32, 7438.23, 7605.61, 7529.39, 7560.18, 7538.67, 7689.18, 7564.48, 7544.6, 7609.05, 7548.14, 7627.15, 7445.54, 7651.46, 7622.07, 7527.54, 7540.37, 7492.23, 7595.02, 7471.16, 7552.75, 7607.48, 7725.21, 7485.21, 7548.02, 7556.58, 7568.04, 7525.58, 7424.13, 7594.8, 7515.06, 7617.96, 7612.98, 7632.73, 7523.07, 7566.05, 7619.13, 7518.75, 7512.05, 7629.02, 7489.8, 7556.25, 7462.54, 7574.19, 7582.19, 7548.19, 7669.82, 7553.12, 7529.41, 7632.75, 7556.1, 7563.64, 7540.63, 7595.4, 7436.65, 7560.92, 7491.34, 7612.93, 7573.63, 7513.26, 7559.8, 7570.68, 7649.16, 7547.09, 7579.23, 7628.43, 7519.23, 7534.9, 7656.01, 7529, 7503.63, 7644.76, 7640.53, 7684.1, 7723.46, 7626.96, 7608.35, 7549.42, 7568.66, 7613.26, 7437.42, 7566.31, 7525.27, 7601.61, 7545.72, 7420.89, 7518.35, 7560.42, 7561.6, 7636.31, 7552.97, 7628.59, 7572.02, 7591.21, 7621.42, 7414.6, 7561.39, 7496.5, 7532.47, 7455.21, 7536.07, 7563.59, 7559.97, 7561.2, 7585.67, 7621.31, 7471.41, 7483.52, 7517.11, 7558.2, 7541.5, 7589.37, 7512.31, 7567.54, 7600.62, 7543.86, 7560.86, 7550.8, 7552.89, 7528.16, 7676.92, 7557.54, 7696.92, 7649.18, 7632.66, 7496.79, 7510.35, 7447.39, 7710.98, 7724.14, 7558.65, 7481.86, 7455.66, 7534.13, 7547.93, 7588.15, 7475.66, 7460.22, 7520.56, 7460.18, 7534.58, 7556.2, 7529.64, 7539.19, 7499.61, 7568.17, 7519.16, 7582.39, 7551.66, 7494.61, 7510.44, 7602.2, 7558.82, 7635.19, 7550.48, 7698.92, 7519.58, 7629.97, 7600.19, 7522.18, 7440.76, 7669.73, 7605.56, 7600.41, 7536.16, 7569.9, 7527.36, 7714.26, 7533.44, 7590.13, 7479.14, 7697.67, 7648.45, 7423.6, 7485.51, 7591.89, 7646.76, 7565.98, 7507.33, 7575.7, 7606.45, 7596.07, 7592.55, 7645.68, 7642.57, 7476.24, 7533.81, 7500.24, 7612.23, 7542.51, 7493.69, 7499.7, 7597.61, 7583.79, 7507.05, 7735.92, 7559.46, 7638.79, 7594.38, 7623.98, 7618.57, 7629.43, 7570.55, 7660.95, 7652.23, 7551.77, 7568.55, 7482.43, 7509.33, 7614.13, 7566.16, 7561.01, 7436, 7595.04, 7510.29, 7602.3, 7626.04, 7616.02, 7602.25, 7610.11, 7482.55, 7530.37, 7516.82, 7495.18, 7492.03, 7556.65, 7584.17, 7572.88, 7550.08, 7547.61, 7578.21, 7582.59, 7606.09, 7553.34, 7539.45, 7659.59, 7592.76, 7544.94, 7498.62, 7457.2, 7423.22, 7546.01, 7549.48, 7629.63, 7557.5, 7596.08, 7581.06, 7584.48, 7495.6, 7497.06, 7624.47, 7493.26, 7564.63, 7457.22, 7513.99, 7576.32, 7601.59, 7447.5, 7583.8, 7552.53, 7557.06, 7473.43, 7624.22, 7551.19, 7571.27, 7543.05, 7501.07, 7607.95, 7582.57, 7548.57, 7508.4, 7574.15, 7513.11, 7636.75, 7616.89, 7501.48, 7638.35, 7604.46, 7581.83, 7555.53, 7644.44, 7565.19, 7630.58, 7520.85, 7604.7, 7572.3, 7529.34, 7481.86, 7524.08, 7624.6, 7624.06, 7589.75, 7614.83, 7664.81, 7607.67, 7581.05, 7536.29, 7485.31, 7673.19, 7531.92, 7586.02, 7521.8, 7527.27, 7650.31, 7531.56, 7480.78, 7423.81, 7510.41, 7467.71, 7612.48, 7598.09, 7434.02, 7650.1, 7598.49, 7464.18, 7621.83, 7634.64, 7491.97, 7488.54, 7634.31, 7555.57, 7501.52, 7587.01, 7643.28, 7600.33, 7602.33, 7479.12, 7544.14, 7527.92, 7570.99, 7614.5, 7613.47, 7631.71, 7604.12, 7505.08, 7491.67, 7579.47, 7580.45, 7505.17, 7633.2, 7517.17, 7451.47, 7626.6, 7507.02, 7527.29, 7651.09, 7485.96, 7649.85, 7507.03, 7587.99, 7601.69, 7661.1, 7525.98, 7613.98, 7622.63, 7591.66, 7514.9, 7601.66, 7493.3, 7551.73, 7575.79, 7480.51, 7599.44, 7588.48, 7480.32, 7546.68, 7601.92, 7613.08, 7527.83, 7627.88, 7639.85, 7561.67, 7581.19, 7399.81, 7699.68, 7540.29, 7469.06, 7643.5, 7669.66, 7517.99, 7507.94, 7551.27, 7440.07, 7592.44, 7531.62, 7655.91, 7603.07, 7393.09, 7565.46, 7668.38, 7598.61, 7581.42, 7455.52, 7537.83, 7568.64, 7520.14, 7590.36, 7579.54, 7519.96, 7563.74, 7584.26, 7480.07, 7544.79, 7517.58, 7484.48, 7466.58, 7586.19, 7597.97, 7478.63, 7552.84, 7624.49, 7672.3, 7563.19, 7610.39, 7552.37, 7567.21, 7530.83, 7532.87, 7546.34, 7452.69, 7536.53, 7528.7, 7630.54, 7558.93, 7515.22, 7546.9, 7576.91, 7711.23, 7601.34, 7570.25, 7667.47, 7492.94, 7692.32, 7536.86, 7511.51, 7581.16, 7535.14, 7616.52, 7519.66, 7519.22, 7564.39, 7488.96, 7474.48, 7555.21, 7527.17, 7445.42, 7607.79, 7552.19, 7621.71, 7578.4, 7576.46, 7591.69, 7554.98, 7516.21, 7557.49, 7612.88, 7560.01, 7575.86, 7646.99, 7523.4, 7485.07, 7510.3, 7604.44, 7530.74, 7450.8, 7524.97, 7539.96, 7580.66, 7583.88, 7479.62, 7655.26, 7507.39, 7554.65, 7588.77, 7448.84, 7444.89, 7542.21, 7510.09, 7516.93, 7554.46, 7532.55, 7704.54, 7496.66, 7541.73, 7638.77, 7500.09, 7542.42, 7618.82, 7559.87, 7489.29, 7446.61, 7470.34, 7674.77, 7598.9, 7648.3, 7620.68, 7516.15, 7477.51, 7532.44, 7586.7, 7619.85, 7402.04, 7518.69, 7566.74, 7619.55, 7556.06, 7598.64, 7637.33, 7573.07, 7563.71, 7595.07, 7549.43, 7628.22, 7556.6, 7652.54, 7481.62, 7615.9, 7459.87, 7472.04, 7625.18, 7511.56, 7540, 7633.98, 7595.07, 7481.81, 7537.94, 7611.26, 7585.38, 7524.87, 7524.53, 7577.27, 7584.47, 7589.74, 7525.77, 7556.97, 7603.22, 7527.42, 7590.15, 7553.35, 7556.31, 7497.93, 7592.37, 7424.6, 7585.16, 7588.06, 7543.03, 7650.55, 7608.52, 7539.87, 7608.16, 7698.82, 7630.96, 7650.28, 7452.03, 7569.91, 7573.99, 7476.7, 7569.17, 7671, 7555.14, 7542.43, 7536.06, 7475.94, 7500.97, 7571.43, 7559.46, 7573.92, 7531.03, 7507.16, 7563.17, 7502.8, 7522.54, 7598.47, 7498.89, 7579.41, 7556.36, 7619.31, 7582.04, 7574.97, 7476.09, 7496.22, 7558.25, 7611.58, 7541.95, 7520.03, 7580.89, 7554.98, 7637.96, 7527.27, 7496.12, 7586.33, 7573.96, 7560.41, 7608.43, 7555.22, 7550.5, 7518.98, 7396.95, 7555.93, 7669.89, 7530.42, 7591.19, 7557.64, 7733.24, 7674.88, 7489.11, 7558.4, 7574.56, 7505.17, 7636.05, 7605.98, 7525.74, 7577.6, 7448.24, 7597.51, 7530.64, 7510.48, 7605.59, 7588.08, 7490.52, 7554.39, 7581.89, 7487.4, 7460.33, 7506.39, 7559.82, 7541.32, 7580.34, 7571.85, 7555.32, 7518.63, 7587.7, 7464.66, 7555.08, 7502.19, 7524.6, 7563.47, 7647.27, 7543.26, 7464.18, 7622.55, 7539.38, 7517.83, 7589.65, 7580.79, 7453.43, 7515.45, 7484.47, 7534.89, 7587.04, 7595.51, 7606.33, 7490.91, 7420.29, 7602.8, 7582.42, 7594.69, 7488.22, 7575.63, 7592.77, 7549.74, 7669.13, 7568.34, 7505.17, 7540.76, 7628.37, 7554.8, 7540.46, 7526.46, 7534.55, 7566.63, 7545.61, 7491.88, 7505.31, 7569.08, 7523.14, 7467.93, 7577.49, 7647.55, 7458.51, 7440.34, 7706.43, 7586.86, 7531.43, 7607.22, 7497.92, 7592.73, 7586.17, 7573.7, 7551.28, 7529.89, 7620.78, 7587.16, 7658.03, 7602.19, 7479.27, 7578.65, 7592.27, 7583.49, 7589.41, 7506.87, 7500.97, 7494.07, 7566.05, 7597.96, 7593.22, 7586.2, 7578.93, 7590.27, 7581.02, 7580.42, 7637.95, 7598.34, 7474.55, 7546.98, 7710.93, 7546.3, 7502.49, 7544.31, 7540.19, 7595.53, 7570.57, 7524.7, 7589.66, 7577.74, 7640.23, 7526.55, 7568.49, 7557.81, 7611.81, 7566.03, 7635.45, 7632.35, 7561.64, 7525.83, 7539.54, 7654.28, 7595.96, 7541.05, 7539.76, 7616.56, 7559.14, 7510.84, 7504.18, 7509.73, 7709.94, 7632.19, 7598.37, 7553.67, 7552.12, 7649.24, 7625.53, 7570.2, 7470.12, 7555.92, 7576.04, 7620.32, 7455.31, 7584.78, 7597.47, 7550.62, 7549.92, 7521.61, 7564.53, 7620.74, 7726.2, 7634.59, 7444.23, 7546.58, 7558.64, 7652.49, 7656.68, 7611.66, 7543.98, 7552.64, 7581.14, 7623.95, 7588.89, 7518.52, 7511.52, 7685.06, 7633.03, 7422.87, 7668.88, 7576.6, 7640.8, 7661.94, 7502.17, 7517.52, 7625.82, 7598.93, 7639.08, 7618.99, 7698.81, 7553.76, 7642.46, 7482.56, 7606.98, 7468.07, 7545.08, 7487.46, 7574.31, 7517.9, 7617.41, 7641.65, 7512.3, 7609.94, 7621.4, 7616.21, 7576.63, 7572.03, 7533.42, 7504.96, 7631.28, 7482.22, 7494.66, 7551.13, 7497.21, 7488.11, 7596.84, 7493.73, 7608.64, 7516.12, 7595.17, 7593.06, 7499.84, 7550.05, 7501.69, 7591.05, 7582.55, 7512.76, 7461.13, 7491.73, 7629.63, 7560.86, 7592.71, 7584.55, 7612.82, 7509.73, 7604.05, 7492.12, 7588.5, 7527.52, 7527.71, 7535.93, 7542.02, 7529.18, 7571.39, 7586.93, 7531.92, 7617.73, 7600.71, 7492.45, 7489.91, 7481.48, 7544.1, 7608.36, 7476.91, 7468.76, 7633.75, 7579.98, 7391.05, 7559.11, 7579.39, 7490.14, 7580.5, 7594.75, 7699.31, 7493.03, 7604.84, 7582.1, 7580.35, 7535.84, 7565.5, 7547.97, 7560.21, 7578.88, 7413.26, 7600.35, 7588.75, 7520.48, 7512.6, 7581.8, 7568.3, 7554.44},{7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567, 7567},{7567.37, 7565.57, 7566.57, 7565.63, 7565.94, 7565.83, 7565.26, 7562.43, 7568.73, 7569.55, 7567.4, 7566.33, 7567.65, 7565.68, 7568.18, 7566.08, 7566.75, 7567.61, 7566.24, 7566.59, 7567.51, 7562.26, 7566.53, 7563.86, 7568.64, 7566.36, 7569.23, 7566.02, 7562.96, 7567.02, 7564.85, 7566.76, 7563.8, 7564.94, 7567.75, 7567.39, 7568.52, 7567.31, 7568.91, 7565.41, 7566.26, 7564.62, 7567.13, 7562.27, 7565.57, 7566.13, 7566.9, 7565.89, 7565.31, 7563.47, 7566.98, 7567.25, 7565.18, 7567.79, 7571.4, 7567, 7567.21, 7568.42, 7566.75, 7566.73, 7566.39, 7564.28, 7564.72, 7567.35, 7567.76, 7563.57, 7567.05, 7565.59, 7566.85, 7566.3, 7566.57, 7567.06, 7567.16, 7566.63, 7565.07, 7566.73, 7567.32, 7566.54, 7566.83, 7564.33, 7567.61, 7567.29, 7567.86, 7566.26, 7567.59, 7566.66, 7568.1, 7567.74, 7567.53, 7565.87, 7564.6, 7566.12, 7566.18, 7564.51, 7567.92, 7566.37, 7570.13, 7567.31, 7565.97, 7565.7, 7565.04, 7567.48, 7566.05, 7564.93, 7565.87, 7566.98, 7566.71, 7568, 7566.42, 7568.18, 7566.81, 7566.35, 7563.08, 7567.35, 7566.64, 7565.03, 7567.16, 7566.75, 7565.97, 7565.65, 7565.72, 7567.3, 7567.83, 7567.07, 7565.5, 7567.52, 7566.22, 7563.73, 7566.41, 7566.81, 7566.45, 7566.77, 7568.23, 7565.7, 7567.65, 7567.51, 7566.27, 7564.94, 7566.99, 7566.63, 7566.2, 7569.6, 7566.8, 7567.2, 7563.88, 7566.54, 7566.83, 7566.4, 7567.66, 7565.44, 7564.48, 7565.74, 7568.37, 7568.26, 7564.25, 7566.85, 7568.43, 7567.08, 7566.43, 7566.46, 7566.99, 7567.52, 7566.96, 7565.9, 7565.88, 7566.13, 7565.33, 7567.33, 7567.83, 7566.4, 7567.33, 7566.25, 7567.31, 7566.67, 7566.57, 7568.09, 7566.73, 7567.2, 7564.97, 7567.11, 7567.99, 7567.83, 7567.35, 7566.1, 7564.41, 7566.46, 7566.88, 7567.62, 7568.86, 7566.82, 7566.45, 7566.95, 7566.8, 7565.94, 7567.07, 7565.38, 7565.98, 7567.32, 7567.84, 7564.11, 7565.4, 7566.77, 7566.66, 7566.41, 7563.33, 7568.36, 7568.42, 7565.95, 7566.18, 7566.14, 7566.35, 7567.16, 7566.28, 7568.18, 7566.42, 7564.62, 7566.61, 7568.41, 7566.79, 7562.29, 7567.18, 7565.52, 7570.18, 7566.6, 7565.91, 7565.65, 7566.02, 7566.59, 7567.04, 7566.35, 7565.74, 7565.62, 7566.23, 7565.2, 7567.49, 7568.88, 7566.58, 7566.96, 7566.38, 7566.31, 7565.25, 7566.63, 7562.09, 7564.8, 7567.27, 7567.09, 7563.98, 7566.9, 7566.55, 7565.7, 7567.12, 7565.43, 7565.97, 7565.77, 7562.59, 7566.92, 7569.37, 7566.98, 7567.9, 7565.52, 7564.92, 7567.35, 7567.14, 7566.71, 7568.19, 7567.44, 7567.9, 7567.44, 7566.1, 7566.55, 7567.18, 7570.8, 7569.03, 7565.93, 7568.21, 7567.69, 7567.15, 7565.3, 7565.76, 7566.24, 7569.15, 7566.54, 7566.83, 7567.65, 7568.11, 7565.29, 7569.34, 7563.7, 7566.03, 7565.65, 7566.8, 7567.32, 7566.49, 7567.47, 7566.6, 7566.64, 7566.25, 7567.17, 7566.32, 7565.14, 7567.22, 7567.52, 7567.45, 7566.41, 7566.76, 7567.5, 7564.89, 7568.04, 7566.32, 7567.08, 7565.88, 7568.63, 7565.64, 7566.13, 7568.05, 7566.48, 7564.48, 7567.49, 7565.97, 7566.54, 7566.71, 7566.92, 7565.48, 7567.68, 7568.07, 7564.11, 7564.79, 7565.64, 7566.28, 7569.55, 7565.35, 7565.04, 7565.45, 7567.51, 7567.73, 7563.7, 7565.2, 7565.48, 7566.26, 7565.6, 7567.32, 7566.64, 7567.44, 7569.26, 7564.6, 7568.19, 7566.18, 7567.38, 7567.27, 7566.67, 7567.32, 7567.27, 7568.51, 7567.31, 7565.7, 7567.16, 7566.72, 7566.16, 7564.13, 7566.57, 7565.89, 7564.97, 7565.61, 7565.69, 7567.96, 7565.48, 7567.89, 7570.42, 7566.69, 7567.05, 7566.69, 7566.23, 7562.8, 7565.05, 7562.77, 7567.2, 7568.1, 7566.79, 7565.69, 7567.86, 7563.81, 7568.18, 7569.69, 7566.39, 7568.73, 7567.18, 7565.63, 7565.52, 7566.3, 7566.13, 7565.68, 7568.5, 7566.94, 7566.39, 7564.3, 7566.85, 7567.54, 7567.06, 7566.09, 7566.46, 7567, 7566.33, 7565.91, 7566.86, 7568.21, 7565.16, 7566.74, 7572.99, 7566.19, 7566.92, 7565.8, 7566.59, 7567, 7565.62, 7567.78, 7564.04, 7567.13, 7566.89, 7566.95, 7566.81, 7567.03, 7567.69, 7566.58, 7567.73, 7568.39, 7564.98, 7566.45, 7568.76, 7565.93, 7565.8, 7564.73, 7566.23, 7565.82, 7568.1, 7566.81, 7566.01, 7566.46, 7566.87, 7565.6, 7567.36, 7566.24, 7566.77, 7566.29, 7566.78, 7567.67, 7567.06, 7567.37, 7564.81, 7565.83, 7566.16, 7563.54, 7565.04, 7566.03, 7566.48, 7563.66, 7563.91, 7566.09, 7567.66, 7565.63, 7567.28, 7566.11, 7565.86, 7564.96, 7568.08, 7565.44, 7567.58, 7567.7, 7566.88, 7562, 7568, 7567.18, 7563.38, 7566.28, 7565.88, 7564.36, 7567.16, 7567.09, 7567.63, 7566.74, 7566.72, 7563.92, 7564.9, 7566.22, 7565.62, 7565.64, 7565.44, 7564.43, 7568.18, 7566.95, 7568.3, 7567.65, 7564.23, 7566.71, 7567.11, 7567.65, 7566.07, 7564.84, 7565.2, 7567.75, 7567.92, 7565.43, 7566.38, 7568.05, 7567.18, 7567.47, 7569.41, 7568.79, 7566.88, 7566.53, 7565.61, 7568.53, 7566.99, 7566.55, 7569.04, 7565.87, 7564.46, 7564.39, 7568.44, 7563.46, 7564.27, 7567.43, 7567.21, 7567.73, 7567.3, 7567.63, 7564.21, 7567.23, 7566.24, 7565.58, 7566.34, 7566.12, 7567.44, 7566.78, 7567.91, 7566.19, 7567.93, 7565.15, 7566.42, 7567.4, 7568.17, 7569.57, 7566.79, 7567.58, 7563.03, 7566.37, 7565.83, 7566.61, 7567.39, 7564.18, 7568.19, 7566.61, 7566.37, 7566.47, 7567.21, 7567.88, 7566.52, 7567.46, 7566.8, 7566.46, 7566.09, 7568.35, 7565.31, 7566.16, 7566.13, 7567.99, 7566.48, 7566.02, 7565.85, 7566.73, 7567.6, 7565.62, 7565.46, 7564.31, 7567.46, 7566.02, 7567.6, 7568.54, 7565.74, 7567.84, 7567.14, 7564.75, 7566.9, 7566.31, 7565.45, 7567.13, 7566.45, 7566.58, 7564.41, 7566.27, 7567.87, 7564.12, 7565.79, 7568.22, 7567.72, 7562.04, 7566, 7566, 7567.54, 7566.21, 7565.8, 7564.84, 7566.78, 7566.16, 7568.04, 7567.04, 7564.98, 7565.31, 7564.31, 7565.21, 7567, 7565.99, 7566.17, 7566.36, 7566.92, 7567.27, 7568.07, 7567.26, 7565.55, 7566.68, 7567.37, 7569.97, 7562.94, 7566, 7567.68, 7566.45, 7566.2, 7566.13, 7566.38, 7567.7, 7567.51, 7567.73, 7567.2, 7566.49, 7564.6, 7567.51, 7566.97, 7563.98, 7566.04, 7565.38, 7565.11, 7568.33, 7564.66, 7565.47, 7564.27, 7567.14, 7564.58, 7569.29, 7567.5, 7568.12, 7567.24, 7567.31, 7566.85, 7566.29, 7567.87, 7566.52, 7562, 7567.14, 7566.16, 7567.51, 7565.48, 7565.11, 7567.76, 7568.42, 7565.46, 7567.06, 7566.96, 7567.59, 7565.05, 7567.24, 7564.99, 7568.11, 7565.12, 7573.27, 7566.67, 7566.48, 7566.8, 7568.25, 7566.7, 7566.46, 7562.67, 7564.8, 7565.94, 7566.58, 7566.14, 7565.71, 7566.98, 7567.54, 7567.5, 7568, 7566.71, 7567.23, 7566.66, 7569.34, 7565.54, 7566.01, 7568.01, 7566.58, 7567, 7566.16, 7565.21, 7567.75, 7565.96, 7568.56, 7567.01, 7565.88, 7567.12, 7564.33, 7566.63, 7565.9, 7565.02, 7564.6, 7567.22, 7566.8, 7566.65, 7564.49, 7568.95, 7565.98, 7565.79, 7565.51, 7564.72, 7564.56, 7564.86, 7565.58, 7565.37, 7566.89, 7566.68, 7568.14, 7566.63, 7567.91, 7565.12, 7566.11, 7565.32, 7567.05, 7566.15, 7570, 7567.06, 7562.86, 7567.96, 7565.91, 7567.05, 7567.6, 7566.57, 7566.7, 7562.5, 7568.43, 7567.52, 7565.12, 7566.18, 7566.34, 7566.9, 7567.89, 7566.76, 7567.69, 7564.58, 7567.42, 7566.31, 7566.13, 7568.71, 7567.57, 7567.26, 7566.04, 7566.3, 7568.14, 7562.75, 7566.22, 7565.42, 7567.25, 7566.8, 7566.73, 7562.79, 7567.07, 7563.06, 7566.76, 7566.61, 7564.34, 7565.99, 7567.17, 7567.17, 7566.48, 7566.54, 7566.37, 7569.6, 7563.99, 7565.55, 7563.17, 7565.89, 7564.81, 7566.83, 7564.05, 7565.54, 7565.89, 7568, 7565.38, 7564.94, 7565.96, 7565.79, 7565.62, 7567.06, 7563.43, 7565.99, 7566.84, 7566.49, 7562.66, 7566.71, 7566.93, 7565.76, 7566.52, 7568.95, 7566.24, 7567.09, 7568.03, 7566.35, 7567.08, 7566.74, 7568.41, 7566.09, 7567.19, 7567.29, 7568.64, 7566.97, 7564.69, 7564.34, 7569.32, 7565.21, 7565.12, 7566.72, 7565.5, 7566.26, 7564.5, 7566.81, 7567.09, 7565.79, 7566.65, 7566.61, 7565.83, 7566.65, 7568.9, 7565.53, 7566.58, 7567.3, 7564.58, 7566.53, 7567.08, 7567.1, 7566.41, 7566.29, 7567.25, 7566.8, 7566.01, 7567.02, 7567.59, 7566.96, 7565.89, 7568.87, 7566.81, 7566.42, 7567.36, 7567.7, 7567.82, 7564.93, 7562.04, 7566.15, 7566.52, 7566.89, 7566.49, 7567.5, 7567.49, 7566.86, 7567.01, 7567.26, 7565.71, 7566.5, 7568.09, 7565.5, 7567.19, 7564.25, 7568.15, 7567.71, 7566.94, 7567.48, 7567.67, 7562.9, 7564.31, 7564.66, 7567.18, 7567, 7565.74, 7566.12, 7566.63, 7565.54, 7565.28, 7566.34, 7565.85, 7567.58, 7565.2, 7566.83, 7567.07, 7568.65, 7566.91, 7567.4, 7567.23, 7565.79, 7567.26, 7566.05, 7566.84, 7565.23, 7568.07, 7567.35, 7566.43, 7568.17, 7567.73, 7567.42, 7566.48, 7565.82, 7564.72, 7567.29, 7566.93, 7566.83, 7568.48, 7567.05, 7567.48, 7568, 7568.49, 7567.25, 7567.04, 7567.67, 7565.29, 7568.45, 7568.15, 7566.16, 7566.3, 7567.8, 7565.93, 7566, 7567.68, 7568.55, 7567.08, 7566.23, 7567.31, 7564.36, 7566.56, 7566.12, 7566.26, 7565.46, 7566, 7567.68, 7567, 7566.19, 7566.61, 7564.79, 7565.62, 7567.98, 7565.85, 7567.3, 7565.54, 7566.87, 7567.59, 7567.78, 7565.85, 7566.76, 7565.82, 7566.54, 7568.39, 7563.06, 7565.91, 7568.56, 7566.63, 7565.82, 7566.17, 7569.74, 7566.86, 7565.64, 7566.64, 7567.18, 7566.18, 7566.15, 7564.15, 7566.47, 7565.31, 7565.69, 7563.61, 7564.5, 7567.12, 7566.68, 7565.88, 7562.27, 7568.23, 7567.95, 7566.4, 7568.4, 7565.49, 7569.03, 7564.24, 7565.91, 7568.38, 7567.2, 7567.57, 7566.38, 7567.89, 7570.28},{7766.34, 7744.5, 7546.83, 6987.97, 7192.39, 7290.74, 7398.37, 7263.7, 8270.49, 7273.88, 7647.29, 7350.86, 7549.35, 7068.54, 8041.81, 7033.53, 7141.27, 7714.6, 7253.22, 6831.77, 7666.49, 7355.33, 7544.13, 7009.87, 6916.13, 7346.63, 7427.84, 7385.02, 7222.57, 6725.96, 7144.18, 8019.96, 7276.26, 7412.27, 6969.2, 8082.74, 7353.12, 7312.5, 7731.47, 7354.29, 7638.61, 7199, 7497.86, 7282.91, 7477.09, 7751.62, 7329.75, 7035.86, 7504.75, 7351.24, 7149.22, 7666.8, 7553.19, 7370.53, 7925.63, 7866.71, 7175.06, 7273.87, 7237.37, 7245.26, 8067.81, 7712.19, 7377.11, 7499.11, 7558, 7495.57, 7602.36, 7593.6, 8035.34, 7314.35, 8184.8, 7868.52, 7395.25, 7892.27, 8179.15, 7082.78, 7662.84, 7909.59, 7440.02, 7939.97, 6786.14, 7848.32, 8128.95, 8167.06, 6806.3, 7680.24, 8050.32, 7607.86, 8204.95, 7474.35, 7113.06, 7326.52, 7303.4, 7241.86, 7616.6, 8182.09, 7735.36, 6998.44, 7343.54, 6801.45, 7559.23, 8081.07, 7072.64, 7533.69, 7155.4, 7108.35, 7487.29, 7598.37, 7343.98, 7019.79, 7125.86, 8063.07, 7419.32, 7881.4, 7514.55, 7367.6, 6979.56, 7701.52, 6959.19, 7481.93, 7468.65, 7694.93, 8449.24, 7072.99, 7389.96, 7541.28, 8100.42, 7308.99, 6971.58, 7171.68, 7999.58, 7448.16, 6908.09, 6955.57, 7991.15, 7155.94, 7275.65, 7524.82, 7367.7, 7502.57, 7387.06, 7056.59, 7700.49, 7513.15, 7841.81, 7742.07, 7699.1, 7038.22, 7387.56, 6385.94, 7638.47, 7320.36, 7670.51, 6971.45, 7782.56, 7536.72, 7729.02, 7943.81, 7518.99, 7175.76, 7361.59, 7193.24, 7876.4, 7428.76, 7768.57, 7581.08, 6241.94, 7219.4, 7389.97, 6837.54, 6957.72, 7301.77, 7788.14, 7379.38, 7514.36, 7838.9, 6875.54, 8165.83, 7464.35, 7597.28, 7373.58, 7726.75, 7559.99, 7611.05, 7128.15, 7380.54, 7790.57, 8337.84, 7886.9, 7663.81, 7680.18, 7515.19, 8125.8, 7353.19, 8540.37, 7660.69, 7923.18, 7698.51, 7463.9, 7613.9, 7473.09, 7592.37, 7735.88, 7728.24, 7569.02, 7829.23, 7205.24, 7919.58, 7498.8, 7130.39, 7762.9, 7495.8, 7194.25, 7675.5, 7785.31, 7748.83, 7382.37, 7500.22, 7319.99, 7323.79, 7511.02, 7246.36, 7400.65, 7570.49, 8424.48, 7109.04, 7363.49, 6427.79, 7281.35, 7965.5, 7746.03, 7902.51, 7460.37, 7040.67, 7916.08, 7436.35, 7979.29, 7818.91, 7691.1, 7410.2, 6901.24, 7770.48, 7110.21, 7181.81, 7478.62, 7588.91, 7672.06, 7554.96, 7062.21, 7446.71, 7972, 7717.53, 7569.93, 7289.29, 7560.91, 8086.29, 7222.43, 7858.89, 7625.16, 6858.09, 7463.65, 7728.71, 7770.54, 7594.61, 7607.29, 7340.93, 7535.62, 7883.68, 7983.18, 6689.52, 7185.75, 7630.49, 6545.91, 8271.8, 7562.79, 7992.8, 7402.72, 7916.82, 7967.71, 7302.05, 8098.59, 7200.75, 7466.02, 7587.76, 7131.23, 7712.49, 7726.66, 7723.62, 7672.9, 7895.91, 7739.01, 7527.74, 7481.15, 7469.96, 7651.93, 7449.81, 7541.4, 7751.38, 7630.22, 7214.05, 7236.24, 7269.73, 7702.24, 7947.44, 7442.5, 7246.7, 8075.62, 7572.31, 7443.1, 7897.69, 7684.43, 7719.65, 7668, 7198.79, 6983.35, 7759.7, 7689.68, 7335.91, 7433.79, 6903.14, 6747.75, 7425.7, 7363.79, 7832.69, 7424.91, 7065.69, 7012.61, 7206.42, 6616.38, 7918.02, 7201.25, 7543.33, 8199.64, 7250.05, 7984.26, 8051.84, 7155.41, 7701.54, 7316.46, 6991.55, 7591.32, 8028.29, 7715.38, 7704.88, 8116.28, 7353.41, 7344.47, 7458.54, 8157.61, 8328.15, 7435.11, 7003.55, 6921.86, 7715.5, 8141.31, 7744.06, 7514.74, 7496.44, 7222.66, 7045.72, 7410.84, 7658.69, 7808.6, 7280.03, 7576.88, 6752.8, 6507.4, 7242.55, 7937.32, 6992.44, 8011.65, 6992.69, 7803.64, 7487.1, 7228.59, 7614.19, 7317.45, 7841.97, 7921.41, 7540.23, 7141.11, 7404.46, 7187.97, 7549.04, 7521.23, 7833.96, 7711.78, 6978.5, 7213.62, 7495, 7589.36, 7328.21, 7239.99, 8441.87, 7748.55, 6936.98, 7835.71, 6704.28, 7163.18, 7500.6, 7335.43, 7420.79, 7371.65, 7370.58, 7122.45, 7458.57, 6899.31, 7229.53, 7629.47, 7163.8, 6452.77, 7271.84, 7192.27, 7429.08, 7837, 7025.03, 7501.28, 7058.49, 7407.17, 7617.98, 7123.22, 7950.05, 7283.05, 7623.45, 7593.69, 6972.2, 7554.63, 7783.27, 6980.09, 6480.34, 7350.8, 7692.36, 7852.83, 7906.5, 7434.97, 7673.37, 7730.95, 7768.65, 7160.14, 7133.75, 7536.06, 7496.89, 7736.72, 7181.51, 7480.45, 7719.17, 7412.75, 7120.27, 7816.25, 7038.39, 7398.43, 7670.87, 7571.44, 7708.52, 7292.92, 7345.99, 7368.17, 7550.06, 7937.27, 7423.4, 7447.77, 7660.12, 7288.68, 7925.2, 6606.41, 7729.38, 7401.81, 7741.58, 7447.82, 7289.07, 7061.04, 7763.63, 7814.73, 7144.62, 8107.82, 7774.31, 7511.82, 7681.4, 8181.13, 7379.58, 8090.74, 7485.22, 7672.71, 7616.22, 7248.78, 7425.55, 7140.75, 7996.58, 7664.88, 7877.03, 7342.09, 7418.83, 7855.18, 8363.02, 7454.52, 7139.73, 8124.37, 7136.75, 7558.53, 8122.1, 7821.09, 7701.86, 7144.45, 7960.36, 6899.55, 7174.3, 7649.18, 6982.68, 7469.06, 7045.59, 7388.28, 6749.2, 8246.67, 7063.72, 7281.23, 7254.03, 7746.15, 7300.75, 7954.49, 7554.61, 6918.55, 7351.6, 7825.79, 7777.94, 8266.75, 7057.36, 7835.55, 7218.63, 7650.83, 7661.77, 7436.57, 7433.71, 6952.54, 7401.32, 7716.73, 7388.56, 7408.49, 7573.18, 7747.07, 7591.59, 7652.4, 7422.73, 7667.38, 8175.15, 7395.06, 6998.2, 7480.32, 7547.1, 7378.66, 7293.1, 6999.29, 7424.8, 7277.09, 7010.73, 7813.67, 7909.09, 7636.35, 7401.95, 6924.33, 7693.86, 7906.6, 7111.91, 7744.78, 7815.07, 7278.56, 7881.32, 7579.01, 7846.03, 7582.18, 7132.08, 7848.94, 7461.77, 7806.05, 7537.51, 7448.33, 8046.75, 7254.31, 7675.01, 7110.91, 7511.13, 7694.92, 7321.51, 7372.94, 7071.05, 7360.95, 8499.43, 7864.26, 8111.5, 7506.49, 6938.22, 7945.13, 8332.62, 7642.94, 7085.13, 6911.9, 7599.9, 7359.89, 6808.4, 8072.7, 7318.07, 7809.74, 7303.26, 7079.91, 7176.59, 7815.36, 7140.76, 7165.77, 7002.22, 7406.32, 7734.9, 7821.29, 8058.89, 7404.3, 7843.35, 7703.11, 7801.87, 6906.48, 7456.42, 8082.98, 8554.19, 7597.15, 7962.94, 7756.67, 7290.76, 7393.8, 7733.88, 7767.34, 7907.59, 7171.76, 7148.23, 7735.03, 7430.63, 7457.57, 7409.89, 7130.53, 7630.14, 7091.47, 7014.52, 8159.94, 8046.26, 7577.07, 7127.27, 7317.1, 7301.58, 7906.32, 7632.08, 6788.96, 7961, 7055.37, 7826.45, 7193.72, 7367.63, 7356.92, 7901.24, 6691.64, 7395.69, 7495.47, 7647.5, 7915.49, 7342.44, 7643.96, 7181.16, 7379.5, 7103.39, 7647.86, 7214.61, 7415.11, 6757.32, 8254.5, 6694.33, 7606.84, 7186.14, 6665.89, 7421.86, 7105.56, 7023.77, 7887.26, 7581.53, 7150.78, 7747.55, 7525.66, 7716.39, 8220.62, 8002.97, 8399.11, 7042.17, 7527.04, 7180.66, 7581.24, 6809.9, 7080.75, 7945.14, 7815.8, 7528.4, 7178.52, 7520.84, 7087.04, 7374.13, 7284.27, 7120.67, 7640.54, 7057.72, 7676.46, 8007.18, 7855.76, 6968.82, 7752.12, 7138.42, 7334.22, 7114.67, 7188.97, 7421.67, 7715.6, 7593.96, 8036, 7907.64, 7255.29, 7547.76, 7674.56, 7598.52, 6924.42, 6864.76, 7338.21, 7538.99, 8130.91, 7467.78, 7759.48, 7279.1, 7621, 7969.18, 8033.47, 7389.95, 7050.95, 7719.88, 7519.92, 8021.3, 7733.37, 6800.15, 8061.82, 7690.06, 7793.1, 7417.02, 7615.16, 7706.74, 7459.16, 7148.43, 6730.56, 7798.99, 7258.99, 7397.02, 7452.43, 7893.39, 7502.51, 7487.46, 7329.06, 7763.69, 7288.06, 7093.69, 7805.7, 7723.18, 7845.26, 6409.64, 7044.9, 7735.02, 7881.68, 7507.59, 7338.93, 7478.17, 7640.59, 7318.65, 7301.28, 7624.93, 7584.78, 7476.26, 7663.74, 7627.8, 7285.94, 6870.13, 7482.37, 7111.9, 7187.64, 6992.37, 7353.18, 7382.87, 7606.63, 7781.97, 7903.83, 7073.26, 7832.79, 7359.41, 7537.09, 6955.45, 7730.74, 8422.81, 7526.18, 7046.62, 7340.88, 7691.21, 7776.43, 7567.09, 7663.86, 7925.35, 6931.16, 7209.3, 7440.13, 8209.39, 7022.53, 7503.61, 6972.47, 7416.03, 7525.23, 7737.05, 7822.31, 7351.59, 7300.98, 6850.65, 7450.79, 7408.54, 7565.05, 7541.06, 8059.47, 7274.06, 7780.23, 7886.54, 7779.87, 7535.71, 6916.56, 7446.53, 7041.26, 6979.19, 7094.28, 7360.63, 6912.89, 7630.84, 7235.05, 7593.56, 7938.29, 7270.77, 7201.03, 8016.45, 7717.95, 7117.74, 7378.44, 7581.11, 7384.22, 7634.31, 8335.98, 7108.49, 7409.82, 7209.41, 8033.29, 7415.8, 7280.99, 7567.73, 8119.2, 7560.61, 7298.46, 7916.58, 7891.71, 7509.56, 7354.95, 7530.38, 7585.43, 7499.86, 7840.7, 7934.26, 7018.58, 7742.46, 7613.49, 7178.97, 7861.81, 7026.6, 7425.5, 7432.12, 7471.66, 7947.9, 7397.85, 7325.4, 7743.59, 8154.76, 7501.48, 7268.56, 7861.36, 7499.84, 8011.89, 7724.43, 7352.29, 7533.81, 8040.84, 6950.12, 8055.76, 7436.22, 7575.99, 7756.31, 7900.21, 7737.77, 7561.41, 7464.64, 7223.16, 7499.2, 7309.7, 6851.2, 7671.75, 7948.52, 7175.46, 7590.64, 7770.7, 7712.56, 7934.44, 8445.91, 7753.63, 7215.43, 7604.31, 7718.28, 7467.65, 7778.21, 7979.26, 6896.78, 7020.73, 7335.27, 7602.68, 7321.65, 7374.83, 7434.4, 7064.52, 7195.71, 7308.9, 7787.16, 7100.05, 7672.54, 7597.11, 7455.44, 7697.54, 6990.99, 7735.64, 7491.84, 7058.49, 6917.27, 7810.72, 7613.5, 7319.28, 7440.01, 7289.03, 7312.83, 7228.16, 7532.36, 7375.54, 7560.87, 8054.53, 7277.43, 7640.85, 7336.5, 6398.27, 6690.5, 7326.6, 7542.14, 7368.62, 6545.09, 7940.85, 7923.5, 7598.54, 7280.22, 7747.9, 7257.76, 7058.36, 7546.37, 7738.61, 7592.11, 7285.19, 7130.91, 7473.69, 7349.41, 7618.36, 7516.96, 8209.95, 7433.81, 7440.98, 7499.67, 7679.39, 7643.59, 7591.71, 6966.81, 7625.57, 7672, 7431.32, 8170.14, 6909.47, 7572.15, 7328.25, 7073.3, 7526.4, 7006.26, 7744.86, 6698.52, 7392.28, 6867.08, 7507.82, 7403.77, 8080.16, 7599.98},{7566.86, 7567.1, 7566.46, 7567.45, 7566.73, 7566.7, 7567.22, 7566.88, 7566.53, 7566.49, 7567.22, 7567.65, 7567.03, 7566.81, 7566.62, 7566.75, 7566.92, 7567.32, 7566.94, 7566.67, 7567.11, 7566.46, 7566.87, 7566.78, 7566.98, 7566.82, 7566.58, 7566.32, 7566.9, 7567.19, 7566.91, 7566.69, 7566.97, 7567.03, 7567.02, 7567.12, 7567.09, 7566.58, 7567.09, 7567.25, 7566.77, 7566.83, 7566.87, 7566.83, 7567.08, 7566.68, 7566.93, 7567.07, 7567, 7566.78, 7566.82, 7566.92, 7566.99, 7566.76, 7566.56, 7567.16, 7567.03, 7566.75, 7566.95, 7566.62, 7567, 7566.38, 7566.5, 7566.99, 7567.04, 7567.44, 7567.16, 7566.81, 7567.27, 7566.81, 7567.14, 7566.82, 7566.71, 7567.14, 7566.65, 7566.89, 7566.72, 7567.2, 7566.56, 7567.3, 7567.04, 7566.81, 7566.94, 7566.96, 7566.66, 7566.91, 7566.93, 7567.08, 7566.9, 7566.81, 7567.38, 7566.48, 7566.47, 7567.08, 7566.73, 7567.18, 7566.91, 7566.82, 7567.31, 7566.94, 7566.74, 7567.15, 7566.76, 7567.69, 7566.8, 7566.92, 7567.04, 7566.99, 7566.54, 7566.88, 7567.56, 7567.04, 7567.05, 7567.3, 7566.85, 7567.13, 7566.76, 7566.8, 7566.52, 7566.85, 7566.57, 7566.76, 7566.54, 7567.15, 7566.53, 7566.16, 7567.02, 7567.02, 7567.26, 7567.1, 7566.85, 7566.71, 7566.97, 7566.97, 7566.68, 7566.96, 7567, 7566.68, 7566.6, 7566.82, 7567.02, 7567.09, 7566.61, 7566.82, 7566.82, 7566.98, 7566.82, 7566.75, 7567.15, 7566.84, 7566.85, 7567.05, 7566.67, 7567.07, 7566.78, 7567.22, 7566.82, 7566.88, 7567.38, 7566.87, 7566.33, 7566.7, 7567.2, 7566.93, 7567.2, 7567.02, 7566.74, 7566.87, 7566.45, 7567.03, 7567.06, 7566.95, 7567.2, 7567.35, 7566.84, 7566.88, 7566.64, 7566.82, 7566.7, 7567.38, 7566.67, 7566.9, 7566.91, 7566.94, 7566.8, 7566.98, 7566.54, 7567.28, 7567.02, 7566.95, 7567.05, 7566.97, 7566.84, 7566.81, 7567.15, 7567.04, 7566.6, 7567.1, 7567.33, 7566.89, 7566.8, 7567, 7566.54, 7567.35, 7566.74, 7566.64, 7566.84, 7566.92, 7566.84, 7566.71, 7567.1, 7566.91, 7566.96, 7566.89, 7567, 7566.77, 7566.54, 7566.56, 7567.18, 7566.43, 7566.79, 7566.86, 7567.13, 7566.54, 7566.9, 7566.99, 7566.74, 7567.33, 7566.85, 7567.42, 7566.74, 7567.06, 7566.64, 7567.16, 7566.81, 7566.94, 7566.88, 7566.44, 7566.67, 7567.08, 7567.03, 7566.77, 7567.05, 7566.78, 7566.44, 7566.93, 7566.83, 7567.06, 7567.04, 7566.72, 7567.03, 7567.63, 7567.06, 7567.1, 7567.12, 7566.91, 7567.21, 7567.21, 7566.83, 7566.88, 7566.79, 7566.74, 7566.76, 7566.97, 7567.04, 7566.67, 7567.45, 7566.9, 7567.39, 7567.21, 7566.82, 7566.88, 7567.08, 7567.08, 7566.45, 7567.07, 7566.83, 7566.89, 7566.78, 7566.94, 7566.33, 7566.5, 7566.98, 7567.11, 7566.83, 7566.15, 7567.41, 7566.63, 7566.93, 7566.63, 7566.75, 7566.99, 7567.06, 7566.88, 7567.21, 7566.77, 7566.85, 7566.71, 7567.12, 7567.15, 7566.83, 7566.92, 7566.77, 7567.21, 7567.01, 7566.94, 7566.88, 7567.19, 7567.2, 7566.83, 7566.78, 7566.99, 7566.55, 7566.96, 7566.8, 7566.93, 7567.22, 7567.07, 7566.8, 7567.11, 7566.43, 7566.96, 7567.42, 7566.74, 7567.06, 7567.18, 7567.12, 7566.88, 7566.7, 7567.38, 7566.71, 7566.88, 7566.79, 7566.99, 7566.84, 7566.62, 7566.81, 7567.01, 7566.73, 7566.95, 7566.66, 7566.67, 7566.96, 7566.99, 7566.88, 7566.71, 7566.81, 7566.76, 7566.68, 7566.7, 7567.23, 7567.57, 7567.42, 7566.64, 7566.6, 7566.15, 7566.66, 7566.78, 7567.25, 7566.65, 7566.64, 7566.79, 7566.74, 7566.59, 7567.05, 7567.31, 7566.77, 7566.78, 7566.93, 7566.86, 7566.93, 7567.2, 7567.01, 7566.78, 7567.73, 7566.79, 7567.14, 7566.69, 7567.22, 7567.08, 7566.98, 7566.82, 7566.74, 7567.03, 7566.56, 7567.04, 7567.08, 7566.62, 7566.74, 7566.96, 7567.28, 7567.44, 7566.89, 7566.88, 7567.27, 7567.28, 7567.27, 7566.69, 7566.46, 7567.06, 7567.45, 7566.84, 7566.79, 7566.96, 7567.06, 7567.22, 7566.81, 7567.26, 7566.82, 7567.03, 7567.54, 7566.98, 7566.87, 7566.79, 7566.74, 7566.66, 7567.42, 7566.45, 7567, 7566.97, 7566.73, 7566.95, 7566.56, 7567.23, 7567, 7567.11, 7566.71, 7567.18, 7567.14, 7566.57, 7566.98, 7566.72, 7566.68, 7566.69, 7566.77, 7567.47, 7566.85, 7567.12, 7566.62, 7567.07, 7566.78, 7567.07, 7566.38, 7566.57, 7566.94, 7566.92, 7566.78, 7567.2, 7566.61, 7567.73, 7567.04, 7566.84, 7566.98, 7567.14, 7567.25, 7566.56, 7566.73, 7567.26, 7567.13, 7566.13, 7567.23, 7567.14, 7567.24, 7567.34, 7566.74, 7566.59, 7567, 7566.22, 7567.02, 7566.99, 7567.15, 7567.09, 7566.73, 7567.03, 7567, 7566.74, 7566.99, 7566.77, 7566.82, 7566.99, 7566.63, 7567.64, 7566.73, 7566.76, 7567.15, 7567.41, 7567.23, 7566.95, 7567.15, 7567.18, 7566.9, 7567.02, 7566.84, 7566.85, 7566.71, 7567.34, 7566.75, 7566.56, 7567.14, 7566.55, 7567.19, 7566.69, 7566.57, 7566.77, 7567.11, 7567.55, 7567.01, 7567.25, 7567.14, 7566.69, 7567.05, 7566.87, 7566.5, 7566.93, 7566.89, 7567.19, 7566.97, 7566.7, 7566.68, 7566.83, 7566.78, 7567.37, 7566.78, 7566.74, 7566.72, 7567.11, 7566.82, 7566.91, 7566.9, 7567.24, 7567.28, 7567.1, 7566.62, 7566.73, 7566.93, 7566.59, 7567.28, 7567.34, 7566.76, 7567.14, 7566.59, 7566.41, 7566.75, 7567.13, 7567.13, 7566.65, 7567.11, 7567.06, 7566.92, 7566.95, 7566.97, 7566.94, 7566.5, 7567.33, 7567.12, 7566.89, 7566.87, 7567.22, 7566.83, 7567.34, 7566.76, 7566.66, 7566.83, 7566.72, 7567.37, 7566.98, 7566.73, 7566.8, 7566.64, 7566.67, 7567.29, 7566.7, 7566.85, 7566.77, 7566.95, 7567.04, 7566.85, 7566.63, 7566.94, 7566.97, 7567.21, 7566.78, 7566.93, 7566.28, 7566.91, 7566.81, 7566.88, 7566.86, 7566.84, 7566.58, 7567.24, 7566.6, 7567.31, 7566.78, 7566.63, 7566.98, 7566.67, 7567.07, 7567.38, 7567.11, 7566.45, 7566.8, 7566.57, 7567.31, 7567.03, 7566.48, 7566.48, 7567.12, 7567.03, 7567.06, 7567.16, 7566.73, 7566.66, 7566.9, 7567.21, 7566.76, 7567.08, 7566.89, 7566.7, 7566.67, 7566.76, 7566.71, 7567.14, 7566.53, 7566.65, 7566.64, 7567.1, 7567.08, 7566.97, 7566.42, 7566.51, 7566.89, 7566.5, 7567.18, 7566.82, 7566.99, 7566.96, 7567.25, 7567.19, 7566.88, 7566.82, 7567.28, 7566.99, 7567.1, 7566.77, 7566.87, 7566.94, 7566.58, 7566.64, 7566.89, 7567.4, 7566.45, 7567.28, 7567.02, 7566.91, 7566.61, 7567.02, 7566.76, 7566.67, 7566.93, 7566.85, 7566.94, 7566.87, 7566.88, 7566.45, 7566.79, 7567.12, 7566.38, 7567.12, 7567.17, 7566.87, 7567.14, 7566.71, 7567.07, 7566.92, 7567.15, 7567.16, 7567, 7566.55, 7566.9, 7566.59, 7567.17, 7566.56, 7566.19, 7566.34, 7566.8, 7566.74, 7566.7, 7567.13, 7566.66, 7566.94, 7566.99, 7567.13, 7566.74, 7566.51, 7567.38, 7566.8, 7567.19, 7567.48, 7566.77, 7566.83, 7566.87, 7566.83, 7567.14, 7566.85, 7566.74, 7566.87, 7566.89, 7566.69, 7567.19, 7566.75, 7566.94, 7566.67, 7566.98, 7567.28, 7567.11, 7566.58, 7566.92, 7566.71, 7567.06, 7567.02, 7567.19, 7566.91, 7566.99, 7566.51, 7566.95, 7567.1, 7566.76, 7566.82, 7566.9, 7567.58, 7566.89, 7567.04, 7566.83, 7566.72, 7567.16, 7566.89, 7566.7, 7567.09, 7566.48, 7566.87, 7567.31, 7566.91, 7566.84, 7566.59, 7566.55, 7566.88, 7566.89, 7567.11, 7567.31, 7566.69, 7566.96, 7567.12, 7566.52, 7566.7, 7566.9, 7567.07, 7566.44, 7567.04, 7566.99, 7566.98, 7566.68, 7566.51, 7566.92, 7567.3, 7566.94, 7566.81, 7567.04, 7567.39, 7566.68, 7567.58, 7567.14, 7567.06, 7566.73, 7566.73, 7567.17, 7567.39, 7566.74, 7567.02, 7567.06, 7567.16, 7566.63, 7567.12, 7566.93, 7566.86, 7567.07, 7566.91, 7567.45, 7567.17, 7567.23, 7566.82, 7567.04, 7566.97, 7567.17, 7566.61, 7566.89, 7567.02, 7566.4, 7567.12, 7566.93, 7566.52, 7567.24, 7566.53, 7566.61, 7567.26, 7566.84, 7566.76, 7567.19, 7567.35, 7566.63, 7566.74, 7566.74, 7566.96, 7566.96, 7566.99, 7566.68, 7567.09, 7567.3, 7566.67, 7566.83, 7566.98, 7566.68, 7566.8, 7566.75, 7567.52, 7567.03, 7567.19, 7566.88, 7566.87, 7566.84, 7567.04, 7566.84, 7566.88, 7566.73, 7566.67, 7567, 7566.66, 7567.27, 7566.61, 7567.47, 7566.86, 7567.34, 7566.95, 7566.9, 7566.67, 7566.94, 7566.73, 7566.9, 7566.98, 7566.98, 7566.68, 7566.88, 7566.81, 7566.69, 7566.96, 7567.07, 7567.16, 7566.55, 7566.78, 7566.76, 7567.25, 7566.8, 7566.92, 7567.22, 7567.05, 7566.93, 7566.54, 7566.98, 7566.97, 7566.71, 7567.15, 7567.18, 7567.11, 7567.15, 7566.78, 7566.71, 7566.61, 7566.83, 7566.52, 7566.87, 7567.19, 7566.38, 7567.06, 7566.89, 7567.23, 7567.28, 7567.08, 7567.35, 7566.69, 7566.48, 7567.08, 7566.73, 7566.9, 7566.87, 7567.08, 7567.12, 7567.39, 7567.14, 7567.24, 7566.67, 7567.02, 7566.46, 7566.84, 7566.93, 7566.61, 7567.15, 7566.83, 7566.86, 7567.02, 7566.97, 7566.99, 7566.82, 7566.93, 7567.24, 7567.12, 7566.75, 7567.25, 7566.79, 7567.16, 7566.87, 7566.42, 7566.58, 7567.36, 7566.72, 7566.59, 7566.76, 7566.82, 7567.17, 7566.8, 7566.8, 7567.27, 7566.83, 7567.29, 7566.53, 7567.14, 7567.15, 7566.85, 7566.73, 7566.74, 7567.07, 7566.96, 7566.32, 7567.39, 7566.86, 7566.7, 7567.16, 7567.13, 7566.57, 7567.08, 7567.23, 7567.09, 7567.13, 7567.35, 7567.21, 7566.94, 7566.79, 7566.74, 7567.04, 7567.03, 7566.99, 7567.16, 7567.4, 7566.66, 7566.89, 7566.79, 7566.55, 7566.7, 7566.8, 7566.67, 7567.05, 7567.15, 7566.94, 7567.13, 7567.21, 7567.13, 7566.81, 7567.07, 7567.6, 7566.65, 7566.85, 7567.2, 7566.49, 7566.58, 7567.34, 7566.94, 7566.72, 7566.88, 7566.59, 7567.26, 7567.25, 7566.83, 7567.17, 7567.36, 7567.12, 7566.86, 7566.88, 7566.83, 7566.96, 7567.19, 7567.24}};

    _bkgd_v = { "Other","Cosmic","CC1pi0","NC1pi0","CC1pi0_outFV","Multpi0", "nue","antinumu","cccex","nccex","ccgamma","kaondecay","ccother","ncother" };

    if ( !_tree ){
      _tree = new TTree("tree","");
      _tree->Branch("event",&_event,"event/I");
      _tree->Branch("bkgd_id",&_bkgd_id,"bkgd_id/I");
      _tree->Branch("nu_mode",&_nu_mode,"nu_mode/I");
      _tree->Branch("nshrs",&_nshrs,"nshrs/I");
      // Vertex
      _tree->Branch("vtx_x",&_vtx_x,"vtx_x/F");
      _tree->Branch("vtx_y",&_vtx_y,"vtx_y/F");
      _tree->Branch("vtx_z",&_vtx_z,"vtx_z/F");
      _tree->Branch("mc_vtx_x",&_mc_vtx_x,"mc_vtx_x/F");
      _tree->Branch("mc_vtx_y",&_mc_vtx_y,"mc_vtx_y/F");
      _tree->Branch("mc_vtx_z",&_mc_vtx_z,"mc_vtx_z/F");
      // Flashes
      _tree->Branch("flash_time",&_flash_time,"flash_time/F");
      _tree->Branch("flash_pe",&_flash_pe,"flash_pe/I");
      _tree->Branch("flash_y_center",&_flash_y_center,"flash_y_center/F");
      _tree->Branch("flash_z_center",&_flash_z_center,"flash_z_center/F");
      _tree->Branch("flash_y_width",&_flash_y_width,"flash_y_width/F");
      _tree->Branch("flash_z_width",&_flash_z_width,"flash_z_width/F");
      // Candidate Muon
      _tree->Branch("mu_angle",&_mu_angle,"mu_angle/F");
      _tree->Branch("mu_len",&_mu_len,"mu_len/F");
      _tree->Branch("mu_startx",&_mu_startx,"mu_startx/F");
      _tree->Branch("mu_starty",&_mu_starty,"mu_starty/F");
      _tree->Branch("mu_startz",&_mu_startz,"mu_startz/F");
      _tree->Branch("mu_endx",&_mu_endx,"mu_endx/F");
      _tree->Branch("mu_endy",&_mu_endy,"mu_endy/F");
      _tree->Branch("mu_endz",&_mu_endz,"mu_endz/F");
      _tree->Branch("mu_phi",&_mu_phi,"mu_phi/F");
      _tree->Branch("mu_mom",&_mu_mom,"mu_mom/F");
      _tree->Branch("mult",&_mult,"mult/F");
      _tree->Branch("mu_purity",&_mu_purity,"mu_purity/F");
      _tree->Branch("mu_complete",&_mu_complete,"mu_complete/F");
      _tree->Branch("mu_cw_purity",&_mu_cw_purity,"mu_cw_purity/F");
      _tree->Branch("mu_cw_complete",&_mu_cw_complete,"mu_cw_complete/F");
      _tree->Branch("mu_origin",&_mu_origin,"mu_origin/F");
      _tree->Branch("mu_type",&_mu_type,"mu_type/F");
      _tree->Branch("mu_pdg",&_mu_pdg,"mu_pdg/I");
      _tree->Branch("mu_mother_pdg",&_mu_mother_pdg,"mu_mother_pdg/I");
      // Candidate pi0 showers
      _tree->Branch("pi0_mass",&_pi0_mass,"pi0_mass/F");
      _tree->Branch("pi0_oangle",&_pi0_oangle,"pi0_oangle/F");
      _tree->Branch("pi0_true_oangle",&_pi0_true_oangle,"pi0_true_oangle/F");
      _tree->Branch("pi0_IP",&_pi0_IP,"pi0_IP/F");
      _tree->Branch("pi0_mom",&_pi0_mom,"pi0_mom/F");
      _tree->Branch("pi0_low_shrE",&_pi0_low_shrE,"pi0_low_shrE/F");
      _tree->Branch("pi0_low_radL",&_pi0_low_radL,"pi0_low_radL/F");
      _tree->Branch("pi0_low_IP_w_vtx",&_pi0_low_IP_w_vtx,"pi0_low_IP_w_vtx/F");
      _tree->Branch("pi0_low_purity",&_pi0_low_purity,"pi0_low_purity/F");
      _tree->Branch("pi0_low_complete",&_pi0_low_complete,"pi0_low_complete/F");
      _tree->Branch("pi0_low_cw_purity",&_pi0_low_cw_purity,"pi0_low_cw_purity/F");
      _tree->Branch("pi0_low_cw_complete",&_pi0_low_cw_complete,"pi0_low_cw_complete/F");
      _tree->Branch("pi0_low_true_gammaE",&_pi0_low_true_gammaE,"pi0_low_true_gammaE/F");
      _tree->Branch("pi0_low_true_detProf_gammaE",&_pi0_low_true_detProf_gammaE,"pi0_low_true_detProf_gammaE/F");
      _tree->Branch("pi0_low_origin",&_pi0_low_origin,"pi0_low_origin/F");
      _tree->Branch("pi0_low_type",&_pi0_low_type,"pi0_low_type/F");
      _tree->Branch("pi0_low_from_pi0",&_pi0_low_from_pi0,"pi0_low_from_pi0/B");
      _tree->Branch("pi0_low_st_x",&_pi0_low_st_x,"pi0_low_st_x/F");
      _tree->Branch("pi0_low_st_y",&_pi0_low_st_y,"pi0_low_st_y/F");
      _tree->Branch("pi0_low_st_z",&_pi0_low_st_z,"pi0_low_st_z/F");
      _tree->Branch("pi0_low_true_st_x",&_pi0_low_true_st_x,"pi0_low_true_st_x/F");
      _tree->Branch("pi0_low_true_st_y",&_pi0_low_true_st_y,"pi0_low_true_st_y/F");
      _tree->Branch("pi0_low_true_st_z",&_pi0_low_true_st_z,"pi0_low_true_st_z/F");
      _tree->Branch("pi0_low_dist_to_nearest_trk",&_pi0_low_dist_to_nearest_trk,"pi0_low_dist_to_nearest_trk/F");
      _tree->Branch("pi0_low_mother_pdg",&_pi0_low_mother_pdg,"pi0_low_mother_pdg/I");
      _tree->Branch("pi0_low_pdg",&_pi0_low_pdg,"pi0_low_pdg/I");
      _tree->Branch("pi0_high_shrE",&_pi0_high_shrE,"pi0_high_shrE/F");
      _tree->Branch("pi0_high_radL",&_pi0_high_radL,"pi0_high_radL/F");
      _tree->Branch("pi0_high_IP_w_vtx",&_pi0_high_IP_w_vtx,"pi0_high_IP_w_vtx/F");
      _tree->Branch("pi0_high_purity",&_pi0_high_purity,"pi0_high_purity/F");
      _tree->Branch("pi0_high_complete",&_pi0_high_complete,"pi0_high_complete/F");
      _tree->Branch("pi0_high_cw_purity",&_pi0_high_cw_purity,"pi0_high_cw_purity/F");
      _tree->Branch("pi0_high_cw_complete",&_pi0_high_cw_complete,"pi0_high_cw_complete/F");
      _tree->Branch("pi0_high_true_gammaE",&_pi0_high_true_gammaE,"pi0_high_true_gammaE/F");
      _tree->Branch("pi0_high_true_detProf_gammaE",&_pi0_high_true_detProf_gammaE,"pi0_high_true_detProf_gammaE/F");
      _tree->Branch("pi0_high_origin",&_pi0_high_origin,"pi0_high_origin/F");
      _tree->Branch("pi0_high_type",&_pi0_high_type,"pi0_high_type/F");
      _tree->Branch("pi0_high_from_pi0",&_pi0_high_from_pi0,"pi0_high_from_pi0/B");
      _tree->Branch("pi0_high_st_x",&_pi0_high_st_x,"pi0_high_st_x/F");
      _tree->Branch("pi0_high_st_y",&_pi0_high_st_y,"pi0_high_st_y/F");
      _tree->Branch("pi0_high_st_z",&_pi0_high_st_z,"pi0_high_st_z/F");
      _tree->Branch("pi0_high_true_st_x",&_pi0_high_true_st_x,"pi0_high_true_st_x/F");
      _tree->Branch("pi0_high_true_st_y",&_pi0_high_true_st_y,"pi0_high_true_st_y/F");
      _tree->Branch("pi0_high_true_st_z",&_pi0_high_true_st_z,"pi0_high_true_st_z/F");
      _tree->Branch("pi0_high_dist_to_nearest_trk",&_pi0_high_dist_to_nearest_trk,"pi0_high_dist_to_nearest_trk/F");
      _tree->Branch("pi0_high_mother_pdg",&_pi0_high_mother_pdg,"pi0_high_mother_pdg/I");
      _tree->Branch("pi0_high_pdg",&_pi0_high_pdg,"pi0_high_pdg/I");
      // Candidate single shower samples
      _tree->Branch("gamma_E",&_gamma_E,"gamma_E/F");
      _tree->Branch("gamma_RL",&_gamma_RL,"gamma_RL/F");
      _tree->Branch("gamma_IP_w_vtx",&_gamma_IP_w_vtx,"gamma_IP_w_vtx/F");
      _tree->Branch("gamma_purity",&_gamma_purity,"gamma_purity/F");
      _tree->Branch("gamma_complete",&_gamma_complete,"gamma_complete/F");
      _tree->Branch("gamma_cw_purity",&_gamma_cw_purity,"gamma_cw_purity/F");
      _tree->Branch("gamma_cw_complete",&_gamma_cw_complete,"gamma_cw_complete/F");
      _tree->Branch("gamma_trueE",&_gamma_trueE,"gamma_trueE/F");
      _tree->Branch("gamma_trueE_detProf",&_gamma_trueE_detProf,"gamma_trueE_detProf/F");
      _tree->Branch("gamma_origin",&_gamma_origin,"gamma_origin/F");
      _tree->Branch("gamma_type",&_gamma_type,"gamma_type/F");
      _tree->Branch("gamma_from_pi0",&_gamma_from_pi0,"gamma_from_pi0/B");
      _tree->Branch("gamma_pdg",&_gamma_pdg,"gamma_pdg/I");
      _tree->Branch("gamma_mother_pdg",&_gamma_mother_pdg,"gamma_mother_pdg/I");
      // post technote version v0.9
      _tree->Branch("n_track_hits_0",&_n_track_hits_0,"n_track_hits_0/I");
      _tree->Branch("n_track_hits_1",&_n_track_hits_1,"n_track_hits_1/I");
      _tree->Branch("n_track_hits_2",&_n_track_hits_2,"n_track_hits_2/I");
      _tree->Branch("n_shower_hits_0",&_n_shower_hits_0,"n_shower_hits_0/I");
      _tree->Branch("n_shower_hits_1",&_n_shower_hits_1,"n_shower_hits_1/I");
      _tree->Branch("n_shower_hits_2",&_n_shower_hits_2,"n_shower_hits_2/I");
      _tree->Branch("n_shr_pi0",&_n_shr_pi0,"n_shr_pi0/I");
      _tree->Branch("n_shr_nushr",&_n_shr_nushr,"n_shr_nushr/I");
      _tree->Branch("n_shr_nutrk",&_n_shr_nutrk,"n_shr_nutrk/I");
      _tree->Branch("n_shr_cosmic",&_n_shr_cosmic,"n_shr_cosmic/I");
      _tree->Branch("n_shr_noise",&_n_shr_noise,"n_shr_noise/I");
      _tree->Branch("sel_evts_m1","std::vector<float>",&_sel_evts_m1);
      _tree->Branch("sel_evts_p1","std::vector<float>",&_sel_evts_p1);
      _tree->Branch("signal",&_signal,"signal/B");

   }

    if(!_shower_tree){
      _shower_tree = new TTree("shower_tree","");
      _shower_tree->Branch("event",&_event,"event/I");
      _shower_tree->Branch("bkgd_id",&_bkgd_id,"bkgd_id/I");
      _shower_tree->Branch("shr_startx",&_shr_startx,"shr_startx/F");
      _shower_tree->Branch("shr_starty",&_shr_starty,"shr_starty/F");
      _shower_tree->Branch("shr_startz",&_shr_startz,"shr_startz/F");
      _shower_tree->Branch("shr_startw",&_shr_startw,"shr_startw/F");
      _shower_tree->Branch("shr_startt",&_shr_startt,"shr_startt/F");
      _shower_tree->Branch("shr_dirx",&_shr_dirx,"shr_dirx/F");
      _shower_tree->Branch("shr_diry",&_shr_diry,"shr_diry/F");
      _shower_tree->Branch("shr_dirz",&_shr_dirz,"shr_dirz/F");
      _shower_tree->Branch("shr_energy",&_shr_energy,"shr_energy/F");
      _shower_tree->Branch("shr_oangle",&_shr_oangle,"shr_oangle/F");
      _shower_tree->Branch("shr_dedx",&_shr_dedx,"shr_dedx/F");
      _shower_tree->Branch("shr_vtx_dist",&_shr_vtx_dist,"shr_vtx_dist/F");
      _shower_tree->Branch("shr_trk_delta_theta",&_shr_trk_delta_theta,"shr_trk_delta_theta/F");
      _shower_tree->Branch("shr_trk_delta_phi",&_shr_trk_delta_phi,"shr_trk_delta_phi/F");
      // post technote version v0.9
      _shower_tree->Branch("shr_ip",&_shr_ip,"shr_ip/F");
      _shower_tree->Branch("shr_rl",&_shr_rl,"shr_rl/F");
      _shower_tree->Branch("shr_purity",&_shr_purity,"shr_purity/F");
      _shower_tree->Branch("shr_complete",&_shr_complete,"shr_complete/F");
      _shower_tree->Branch("shr_origin",&_shr_origin,"shr_origin/F");
      _shower_tree->Branch("shr_type",&_shr_type,"shr_type/F");
      _shower_tree->Branch("shr_from_pi0",&_shr_from_pi0,"shr_from_pi0/B");
      _shower_tree->Branch("shr_pdg",&_shr_pdg,"shr_pdg/I");
      _shower_tree->Branch("shr_mother_pdg",&_shr_mother_pdg,"shr_mother_pdg/I");
    }   

    if( !_univ) {
       _univ = new TTree("univ","");
       _univ->Branch("xsec_v","std::vector<std::vector<float>>",&_xsec_v); 
       _univ->Branch("perc_v","std::vector<std::vector<float>>",&_perc_v); 
     }

    
    if ( _eventweight_producer == "genieeventweight" ){
      _genie_label_v = {"AGKYpT","AGKYxF","DISAth","DISBth","DISCv1u","DISCv2u","FermiGasModelKf", "FermiGasModelSf","FormZone", "IntraNukeNabs", "IntraNukeNcex", "IntraNukeNel", "IntraNukeNinel", "IntraNukeNmfp", "IntraNukeNpi", "IntraNukePIabs", "IntraNukePIcex", "IntraNukePIel", "IntraNukePIinel", "IntraNukePImfp", "IntraNukePIpi", "NC", "NonResRvbarp1pi", "NonResRvbarp2pi", "NonResRvp1pi", "NonResRvp2pi", "ResDecayEta", "ResDecayGamma", "ResDecayTheta", "ccresAxial", "ccresVector", "cohMA", "cohR0", "ncelAxial", "ncelEta", "ncresAxial", "ncresVector", "qema", "qevec"};

      int funcs = _genie_label_v.size() ; //78 total, +- for each func

      _sel_evts_m1.resize(funcs,0) ;
      _sel_evts_p1.resize(funcs,0) ;
    } 

    return true;
  }

  void BackgroundTruthMatchBT::clear(){

    _bkgd_id = -1 ;
    _nu_mode = -1 ;
    _nshrs = -1 ;
    _mult    = 0;
    _vtx_x   = -999;
    _vtx_y   = -999;
    _vtx_z   = -999;
    _mc_vtx_x   = -999;
    _mc_vtx_y   = -999;
    _mc_vtx_z   = -999;

    _flash_time = -999;
    _flash_pe = -1 ;
    _flash_y_center = -999;
    _flash_z_center = -999;
    _flash_y_width = -999;
    _flash_z_width = -999;

    _mu_angle = -999;
    _mu_len   = -999;
    _mu_startx = -999;
    _mu_starty = -999;
    _mu_startz = -999;
    _mu_endx = -999;
    _mu_endy = -999;
    _mu_endz = -999;
    _mu_phi  = -999;
    _mu_mom  = -999;
    _mu_complete  = 0.;
    _mu_purity  = 0.;
    _mu_cw_complete  = 0.;
    _mu_cw_purity  = 0.;
    _mu_origin = -1;  // 1 is nu, 2 cosmic, -1 is noise
    _mu_type   = -1 ; // 0 is track
    _mu_pdg = -1;  
    _mu_mother_pdg = -1;  

    _pi0_mass = -999;
    _pi0_oangle = -999;
    _pi0_true_oangle = -999;
    _pi0_IP = -999;
    _pi0_mom = -999;
    _pi0_low_shrE = -999;
    _pi0_low_radL = -999;
    _pi0_low_IP_w_vtx = -999;
    _pi0_low_purity = 0.;
    _pi0_low_complete = 0.;
    _pi0_low_cw_purity = 0.;
    _pi0_low_cw_complete = 0.;
    _pi0_low_true_gammaE = -999;
    _pi0_low_true_detProf_gammaE = -999;
    _pi0_low_origin = -1;
    _pi0_low_type = -1 ; // 1 is shower, 0 is track
    _pi0_low_from_pi0= false ; 
    _pi0_low_st_x  = -999;
    _pi0_low_st_y  = -999;
    _pi0_low_st_z  = -999;
    _pi0_low_dist_to_nearest_trk = -999 ;
    _pi0_low_mother_pdg = -1;
    _pi0_low_pdg = -1;

    _pi0_high_shrE = -999;
    _pi0_high_radL = -999;
    _pi0_high_IP_w_vtx = -999;
    _pi0_high_purity = 0.;
    _pi0_high_complete = 0.;
    _pi0_high_cw_purity = 0.;
    _pi0_high_cw_complete = 0.;
    _pi0_high_true_gammaE = -999;
    _pi0_high_true_detProf_gammaE = -999;
    _pi0_high_origin = -1 ;
    _pi0_high_type = -1  ; // true is shower
    _pi0_high_from_pi0 = false ; 
    _pi0_high_st_x = -999 ;
    _pi0_high_st_y = -999 ;
    _pi0_high_st_z = -999 ;
    _pi0_low_true_st_x = -999;
    _pi0_low_true_st_y = -999;
    _pi0_low_true_st_z = -999;
    _pi0_high_true_st_x= -999 ;
    _pi0_high_true_st_y= -999 ;
    _pi0_high_true_st_z= -999 ;
    _pi0_high_dist_to_nearest_trk = -999 ;
    _pi0_high_mother_pdg = -1;
    _pi0_high_pdg = -1;

    _gamma_E = -999;
    _gamma_RL = -999;
    _gamma_IP_w_vtx = -999;
    _gamma_purity = 0.;
    _gamma_complete = 0.;
    _gamma_cw_purity = 0.;
    _gamma_cw_complete = 0.;
    _gamma_trueE = -999;
    _gamma_trueE_detProf = -999;
    _gamma_origin = -1;
    _gamma_type = -1 ;
    _gamma_from_pi0 = false;
    _gamma_pdg = -1;
    _gamma_mother_pdg = -1;

    _shr_startx = -999;
    _shr_starty = -999;
    _shr_startz = -999;
    _shr_startw = -999;
    _shr_startt = -999;
    _shr_dirx = -999;
    _shr_diry = -999;
    _shr_dirz = -999;
    _shr_energy = -999;
    _shr_oangle = -999;
    _shr_dedx = -999;
    _shr_vtx_dist = -999;
    _shr_trk_delta_theta = -999;
    _shr_trk_delta_phi = -999;
    _shr_pdg = -1;
    _shr_mother_pdg = -1;

    // additions post technote version v0.9
    _n_track_hits_0 = 0;
    _n_track_hits_1 = 0;
    _n_track_hits_2 = 0;
    _n_shower_hits_0 = 0;
    _n_shower_hits_1 = 0;
    _n_shower_hits_2 = 0;

    _shr_ip = -999;
    _shr_rl = -999;
    _shr_complete = -999;
    _shr_purity = -999;
    _shr_origin = -999;
    _shr_type = -999;
    _shr_from_pi0 = false;

    _n_shr_pi0 = 0;   
    _n_shr_nutrk = 0;   
    _n_shr_nushr = 0;   
    _n_shr_cosmic = 0;   
    _n_shr_noise = 0;   

    _signal = false;

    int funcs = _genie_label_v.size() ; //78 total, +- for each func
    if ( _eventweight_producer == "fluxeventweight" )
      funcs = 13;

    _sel_evts_m1.clear();
    _sel_evts_p1.clear();
    _sel_evts_m1.resize(funcs,0) ;
    _sel_evts_p1.resize(funcs,0) ;

  }
  
  bool BackgroundTruthMatchBT::analyze(storage_manager* storage) {

    _event++ ;
    //std::cout<<"\n\nEVENT IS: "<<_event<<std::endl;
    clear();

    auto ev_shr = storage->get_data<event_shower>("showerreco");
    //if ( ev_shr->size() == 0 ) return false ;

    auto ev_vtx= storage->get_data<event_vertex>("numuCC_vertex"); 
    if(!ev_vtx || !ev_vtx->size() ) {
      std::cout<<"Event has no recovertex info "<<std::endl;
      return false;
    }

    auto vtx = ev_vtx->at(0); 
    _vtx_x = vtx.X();
    _vtx_y = vtx.Y();
    _vtx_z = vtx.Z();

    auto ev_tagged_trk = storage->get_data<event_track>("numuCC_track");
    if ( !ev_tagged_trk || !ev_tagged_trk->size() ){ std::cout<<"No Tagged Track!" <<std::endl ; return false; }

    auto tagged_trk = ev_tagged_trk->at(0) ;

    // Fill track information
    _mu_phi = tagged_trk.Phi();
    _mu_angle = cos(tagged_trk.Theta());
    _mu_len =   tagged_trk.Length(0); // Calculates the length from point 0 to end
    _mu_startx = tagged_trk.Vertex().X(); 
    _mu_starty = tagged_trk.Vertex().Y(); 
    _mu_startz = tagged_trk.Vertex().Z(); 
    _mu_endx = tagged_trk.End().X(); 
    _mu_endy = tagged_trk.End().Y(); 
    _mu_endz = tagged_trk.End().Z(); 
    //_mu_mom  = tagged_trk.VertexMomentum() ;

    // Adjust for pandora bug
    std::vector<double> dir = { (_mu_endx - _mu_startx) / _mu_len,
                                (_mu_endy - _mu_starty) / _mu_len,
                                (_mu_endz - _mu_startz) / _mu_len };

    auto dir_start = tagged_trk.VertexDirection();
    std::vector<double> other_dir = { dir_start.X(), dir_start.Y(), dir_start.Z() };  

    float dotProd = dir.at(0) * other_dir.at(0) + dir.at(1) * other_dir.at(1) +  dir.at(2) * other_dir.at(2) ;

    if( dotProd < 0 ) { 
       TVector3 new_dir(-dir_start.X(),-dir_start.Y(),-dir_start.Z());
       _mu_angle = cos(new_dir.Theta());
       _mu_phi = new_dir.Phi();
    }   

    // Fill multiplicity info + find ID of pandora track that is numuCC_track
    auto ev_trk = storage->get_data<event_track>("pandoraNu");
    int min_trk_dist = 1e9;
    int min_trk_dist_it = -1;

    for ( int ii = 0; ii < ev_trk->size(); ii++){

        auto t = ev_trk->at(ii);
        auto st = t.Vertex() ;
        auto end = t.End() ;

        auto dist_st = sqrt( pow(st.X() - vtx.X(),2) + pow(st.Y() - vtx.Y(),2) + pow(st.Z() - vtx.Z(),2) );
        auto dist_end = sqrt( pow(end.X() - vtx.X(),2) + pow(end.Y() - vtx.Y(),2) + pow(end.Z() - vtx.Z(),2) );

        if (dist_st < 3 || dist_end < 3)
          _mult ++ ;

        auto tag_end = tagged_trk.End() ;
        auto dist = sqrt( pow(tag_end.X() - end.X(),2) + pow(tag_end.Y() - end.Y(),2) + pow(tag_end.Z() - end.Z(),2) );
        if ( dist < min_trk_dist ){
	  min_trk_dist = dist ;
	  min_trk_dist_it = ii ;
	}
    }
    auto ev_flash = storage->get_data<larlite::event_opflash>("simpleFlashBeam");
    if ( ev_flash->size() ){
      
      int max_it = -1;
      int max_pe = -1;
      for( int ff = 0; ff < ev_flash->size(); ff++){
        auto f = ev_flash->at(ff);
        if ( f.TotalPE() > max_pe ) {
	  max_pe = f.TotalPE();
	  max_it = ff;
	}
      }

     if ( max_it != -1 ){
      auto f = ev_flash->at(max_it);

      _flash_pe = f.TotalPE();
      _flash_time = f.Time();
      _flash_y_center = f.YCenter();
      _flash_z_center = f.ZCenter();
      _flash_y_width = f.YWidth();
      _flash_z_width = f.ZWidth();
     }
    
    }

    auto ev_hit = storage->get_data<larlite::event_hit>("gaushit");

    if (!ev_hit || ev_hit->size() == 0){
      std::cout << "No hits! exit" << std::endl;
      return false;
    }   

    for ( auto const & h : *ev_hit ){

      if ( h.WireID().Plane == 0 ){
        if ( h.GoodnessOfFit() >= 0 )
	  _n_shower_hits_0++;
	else 
	  _n_track_hits_0++;
      }

      if ( h.WireID().Plane == 1 ){
        if ( h.GoodnessOfFit() >= 0 )
	  _n_shower_hits_1++;
	else 
	  _n_track_hits_1++;
      }

      if ( h.WireID().Plane == 2 ){
        if ( h.GoodnessOfFit() >= 0 )
	  _n_shower_hits_2++;
	else 
	  _n_track_hits_2++;
      }
    }

    std::vector<int> pur_ctr_v ;
    std::vector<float> cw_pur_ctr_v ;

    ///////////////////////////////////////////////////////////////////////////////////////////////
    // Want to be able to access the origin of the tagged muon. Thus, need to find it, and 
    // Ask for its origin.  Need to match to MCtrack to do this
    ///////////////////////////////////////////////////////////////////////////////////////////////
    if ( _mc_sample ){

      auto ev_mct = storage->get_data<event_mctrack>("mcreco");
      if ( !ev_mct || !ev_mct->size() ) {std::cout<<"No MCTrack!" <<std::endl ; return false; }

      auto ev_mcs = storage->get_data<event_mcshower>("mcreco") ;
      if ( !ev_mcs || !ev_mcs->size() ) {std::cout<<"No MCShower!" <<std::endl ; return false; }

      auto ev_mctruth= storage->get_data<event_mctruth>("generator"); 
      if(!ev_mctruth || !ev_mctruth->size() ) {
        std::cout<<"Event has no mctruth info "<<std::endl;
        return false;
      }

      auto ev_mcc = storage->get_data<event_cluster>("mccluster");

      auto & truth = ev_mctruth->at(0);
      auto & nu  = truth.GetNeutrino();

      _nu_mode = nu.Mode();
      if (_nu_mode == 10) _nu_mode = 4;

      auto traj = nu.Nu().Trajectory();
      auto mc_vtx_x = traj.at(traj.size() - 1).X();
      auto mc_vtx_y = traj.at(traj.size() - 1).Y();
      auto mc_vtx_z = traj.at(traj.size() - 1).Z();
      auto tvtx = traj.at(traj.size() - 1).T();

      auto vtxtick = (tvtx / 1000.) * 2.;
      auto vtxtimecm = vtxtick * _time2cm; 
      auto sce_corr = _SCE->GetPosOffsets(mc_vtx_x,mc_vtx_y,mc_vtx_z);
      
      _mc_vtx_x = mc_vtx_x + vtxtimecm + 0.7 - sce_corr.at(0);
      _mc_vtx_y = mc_vtx_y + sce_corr.at(1);
      _mc_vtx_z = mc_vtx_z + sce_corr.at(2);

      // Now get Mccluster info
      auto ev_ass = storage->get_data<larlite::event_ass>("mccluster");
      auto const& ass_keys = ev_ass->association_keys();

      if ( ass_keys.size() == 0 ) return false; 

      larlite::event_cluster *ev_mcclus = nullptr;
      auto ass_hit_clus_v = storage->find_one_ass( ass_keys[0].first, ev_mcclus, ev_ass->name() );

      larlite::event_hit *ev_mchit = nullptr;
      auto ass_mcclus_v = storage->find_one_ass( ass_keys[0].second, ev_mchit, ev_ass->name() );

      if (ass_hit_clus_v.size() == 0){
        std::cout << "No hit ass! exit" << std::endl;
        return false;
      }   
      if (ass_mcclus_v.size() == 0){
        std::cout << "No mcclus ass! exit" << std::endl;
        return false;
      }   

      auto ev_hit_cosRem = storage->get_data<event_hit>("pandoraCosmicHitRemoval"); 

      if ( !ev_hit_cosRem || ev_hit_cosRem->size() == 0 ) {
        std::cout << "No such hits associated to track! " << std::endl;
        return false;
      }

      auto ev_hr_ass = storage->get_data<larlite::event_ass>("pandoraNu"); 

      if ( !ev_hr_ass || ev_hr_ass->size() == 0 ) {
        std::cout << "No such association! " << std::endl;
        return false;
      }

      // Get association to trk => hit and hit => trk
      auto const& ass_hit_v = ev_hr_ass->association(ev_trk->id(), ev_hit_cosRem->id());

      if ( ass_hit_v.size() == 0) {
        std::cout << "No ass from track => hit! " << std::endl;
        return false;
      }

      // Keep track of the charge-weighted hit count
      std::map<int,float> tot_mc_cw_hits_v ; 

      _mc_hit_map.clear();

      // Fill map with hits from mccluster : clusterID
      for( int i = 0; i < ass_mcclus_v.size(); i ++ ){

        auto cid = ev_mcc->at(i) ;
        if ( cid.View() != 2 ) continue;

        for ( int j = 0; j < ass_mcclus_v[i].size(); j++ ){

          auto hid = ass_mcclus_v[i][j];
          _mc_hit_map[hid] = i ; 
          auto h = ev_hit->at(hid);

          if ( tot_mc_cw_hits_v.find(i) == tot_mc_cw_hits_v.end() )
            tot_mc_cw_hits_v[i] = h.Integral() ;
          else
            tot_mc_cw_hits_v[i] += h.Integral() ;
           
        }
      }

      // for each reco cluster, find the origin of all hits and calc purity/completeness 
      // the "...size()+1" is to account for noise category
      pur_ctr_v.resize(ass_mcclus_v.size()+1,0) ;
      cw_pur_ctr_v.resize(ass_mcclus_v.size()+1,0) ;

      int max_hits = -1;
      int max_cw_hits = -1;
      int max_cid = -1 ;
      float tot_reco_cw_hits = 0;

      // This particular headache is necessary because there are no gaushit associations
      // to pandoraNu tracks, only pandoraNuCosmicRemoval associations. 
      // We're using gaushit for everything else including clustering + mccluster building though,
      // so need to find the gaushits that correspond to the cosmic removal hits 
      // and store these IDs for backtracker to work.
       std::vector<int> tag_trk_gaushit_v;
       for(int i = 0; i < ass_hit_v.at(min_trk_dist_it).size(); i++){
          auto hid = ass_hit_v.at(min_trk_dist_it).at(i) ;
          auto h = ev_hit_cosRem->at(hid);
          if ( h.WireID().Plane != 2 ) continue;

          for(int j = 0; j < ev_hit->size(); j++){
            auto hj = ev_hit->at(j) ; 
            if ( hj.WireID().Plane != 2 ) continue;

            if ( hj.PeakTime() == h.PeakTime() && hj.WireID().Wire == h.WireID().Wire )
              tag_trk_gaushit_v.emplace_back(j);
          }
       }

       // Now calculate purity and completeness for muon track
       for(int i = 0; i < tag_trk_gaushit_v.size(); i++){
          auto hid = tag_trk_gaushit_v.at(i) ;
          auto h = ev_hit->at(hid);

          if ( h.WireID().Plane != 2 ) continue;

          tot_reco_cw_hits += h.Integral() ;
          
          if ( _mc_hit_map.find(hid) != _mc_hit_map.end() ){

            auto mcclus_id = _mc_hit_map[hid] ;

            pur_ctr_v[mcclus_id]++ ; 
            cw_pur_ctr_v[mcclus_id] += h.Integral() ; 

            if( pur_ctr_v[mcclus_id] > max_hits ){
             
              max_hits = pur_ctr_v[mcclus_id];
              max_cid = mcclus_id ; 
              max_cw_hits = cw_pur_ctr_v[mcclus_id] ;
            }
          }
	      else {
	        // our "else" here is to account for noise category in which there is no corresponding true charge
	        auto mcclus_id = ass_mcclus_v.size() ;
            pur_ctr_v[mcclus_id]++ ; 
            cw_pur_ctr_v[mcclus_id] += h.Integral() ; 
            if( pur_ctr_v[mcclus_id] > max_hits ){
             
              max_hits = pur_ctr_v[mcclus_id];
              max_cid = mcclus_id ; 
              max_cw_hits = cw_pur_ctr_v[mcclus_id] ;
            }
	      }
        }

        if ( max_cid != ass_mcclus_v.size() && max_cid != -1 ){

          auto tot_mc_hits =  ass_mcclus_v[max_cid].size(); 
          auto tot_reco_hits = tag_trk_gaushit_v.size() ; 
          _mu_purity   = float(max_hits) / tot_reco_hits ;
          _mu_complete = float(max_hits) / tot_mc_hits ;
          _mu_cw_purity   = float(max_cw_hits) / tot_reco_cw_hits ;
          _mu_cw_complete = float(max_cw_hits) / tot_mc_cw_hits_v[max_cid]; 
        }
        else {
          // Noise category
          _n_noise++;
          _bkgd_id = 0 ;
          _event_list.emplace_back(_event) ;
        }

      ///////////////////////////////////////////////////////////////////////////////////////////////
      /// Now count the number of backgrounds and signals
      ///////////////////////////////////////////////////////////////////////////////////////////////
      if( _bkgd_id == -1 ){

        bool infv = true;
        if( mc_vtx_x < 20 || mc_vtx_x > 236.35 || mc_vtx_y > 96.5 || mc_vtx_y < -96.5 || mc_vtx_z < 10 || mc_vtx_z > 1026.8 )
          infv = false;

        auto parts = ev_mctruth->at(0).GetParticles();
        int n_pi0 = 0;
        int n_gamma = 0;

        for ( auto const & p : parts ){
          if( p.StatusCode() == 1 && p.PdgCode() == 111 )
            n_pi0++;

          if( p.StatusCode() == 1 && p.PdgCode() == 22 )
            n_gamma++;
        }   

 
        int n_shr_111 = 0;
	std::vector<int> shr_it_v ;
        for ( int si = 0; si < ev_mcs->size(); si++ ){
	  auto s = ev_mcs->at(si) ;
	  if ( s.MotherPdgCode() == 111 ){
	    n_shr_111++ ;
	    shr_it_v.emplace_back(si);
          }
	}
        if ( n_shr_111 == 2 )
          _pi0_true_oangle = acos( ev_mcs->at(shr_it_v.at(0)).StartDir().Dot(ev_mcs->at(shr_it_v.at(1)).StartDir()) )  ;

       auto mcclus = ev_mcc->at(max_cid) ;
       _mu_type   = mcclus.StartOpeningAngle() ; // opening angle set to track (0) or shower(1) in mccluster builder
       auto ts_index = mcclus.Width() ;           // width set to carry mct/s index

       if( _mu_type == 0 ){
         auto mct = ev_mct->at(ts_index) ;
         _mu_origin = mct.Origin(); 
         _mu_mother_pdg = mct.MotherPdgCode();
         _mu_pdg = mct.PdgCode();
       }
       else{
         auto mcs = ev_mcs->at(ts_index) ;
         _mu_origin = ev_mcs->at(ts_index).Origin(); 
         _mu_mother_pdg = mcs.MotherPdgCode();
         _mu_pdg = mcs.PdgCode();
       }

        if( _mu_origin == 2){
          _n_cosmic++;
          _bkgd_id = 1; 
        }
        else if( abs(nu.Nu().PdgCode()) == 12 ){
          _n_nue ++ ; 
          _bkgd_id = 6 ;
        }
        else if( nu.Nu().PdgCode() == -14 ){
          _n_antimu ++ ; 
          _bkgd_id = 7 ;
        }
        // frmo here we can assume we have a muon neutrino
        else if( nu.Nu().PdgCode() == 14 && n_pi0 == 1 && nu.CCNC() == 0 && infv){
          _bkgd_id = 2;
          _n_cc1pi0++; 
        }
        else if( nu.CCNC() == 1 && n_pi0 > 0 ) {
          _bkgd_id = 3;
          _n_nc1pi0 ++; 
        }
        else if ( nu.CCNC() == 0 && n_pi0 == 1 && !infv ){
          _bkgd_id = 4 ;
          _n_cc1pi0_outFV ++; 
        }
        else if( nu.CCNC() == 0 && n_pi0 > 1 ) {
          _bkgd_id = 5;
          _n_multpi0 ++; 
        }
        else if( n_pi0 == 0 && n_gamma > 0 ){
          if ( n_gamma  == 1 )
            _1gamma++;

          _bkgd_id = 10 ;
          _n_gamma++;
        }
        else{
          
          bool charge_ex = false; 
          bool kaon_decay = false; 
          for ( auto const & s : *ev_mcs ){
            if ( s.MotherPdgCode() == 111 && s.Origin() == 1 && abs(s.AncestorPdgCode()) == 211 ){
              charge_ex = true; 
              break;
            }
            if ( s.MotherPdgCode() == 111 && s.Origin() == 1 && abs(s.AncestorPdgCode()) == 321 ){
              kaon_decay = true; 
              break;
            }
          }

          if( charge_ex && nu.CCNC() == 0 ){
            _bkgd_id = 8;
            _n_cccex++;
          }
          else if( charge_ex && nu.CCNC() == 1 ) {
            _bkgd_id = 9;
            _n_nccex++;
          }
          else if( kaon_decay ){
            _bkgd_id = 11;
            _n_kaondecay++;
          }
          else if( !charge_ex && nu.CCNC() == 0 ){
            _bkgd_id = 12;
            _n_ccother++; 

          }
          else if( !charge_ex && nu.CCNC() == 1 ){
            _bkgd_id = 13;
            _n_ncother++; 
          }
          else {
            _bkgd_id = 14;
            _n_other ++;   
          }
        }
      }

      // Get the association from cluster -> hit
      auto const & ev_clus = storage->get_data<event_cluster>("ImageClusterHit");
      auto const & ev_ass_c = storage->get_data<larlite::event_ass>("ImageClusterHit");
      auto const & ass_imageclus_v = ev_ass_c->association(ev_clus->id(), ev_hit->id());

      if ( _get_pi0_info ){

        auto ev_s = storage->get_data<event_shower>("pi0_candidate_showers");
        if( !ev_s || !ev_s->size() ){ 
          std::cout<<"Not enough reco'd showers..." <<std::endl;
          return false;
         }   

        auto const& shr1 = ev_s->at(0) ;
        auto const& shr2 = ev_s->at(1);
        bool lowE_is_shr1 = shr1.Energy(2) < shr2.Energy(2) ? 1 : 0 ;

        // Get the association from shower -> cluster
        auto ev_ass_s = storage->get_data<larlite::event_ass>("pi0_candidate_showers");
        auto const& ass_showerreco_v = ev_ass_s->association(ev_s->id(), ev_clus->id());
        
        // Loop over showers associated to pi0 candidates
        for (size_t i = 0; i < ass_showerreco_v.size(); i++ ){

          float purity = 0., complete = 0., cw_purity = 0., cw_complete = 0.;
	      float pi0_origin = -1, pi0_type = -1 ;
	      bool from_pi0 = false ;
          int ts_index = -1 ;

          // Loop over clusters associated to this pi0 candidate shower
          // Only consider plane 2
          for (size_t j = 0; j < ass_showerreco_v.at(i).size(); j++ ){

            auto clus_id = ass_showerreco_v.at(i).at(j); 
            auto iclus = ev_clus->at(clus_id);
          
            int plane = iclus.Plane().Plane ;
            if ( plane != 2 ) continue;

            pur_ctr_v.clear();
            cw_pur_ctr_v.clear();
            pur_ctr_v.resize(ass_mcclus_v.size()+1,0) ;
            cw_pur_ctr_v.resize(ass_mcclus_v.size()+1,0) ;

            max_hits = -1;
            max_cw_hits = -1;
            max_cid = -1 ;
            tot_reco_cw_hits = 0;

            // Loop through all hits associared to the cluster 
            for ( int k = 0; k < ass_imageclus_v.at(clus_id).size(); k++ ){

              auto hid = ass_imageclus_v.at(clus_id).at(k) ; 
              auto h = ev_hit->at(hid);
              tot_reco_cw_hits += h.Integral() ;
              
              if ( _mc_hit_map.find(hid) != _mc_hit_map.end() ){

                auto mcclus_id = _mc_hit_map[hid] ;

                pur_ctr_v[mcclus_id]++ ; 
                cw_pur_ctr_v[mcclus_id] += h.Integral() ; 

                if( pur_ctr_v[ mcclus_id] > max_hits ){
                  max_hits = pur_ctr_v[mcclus_id];
                  max_cid = mcclus_id ; 
                  max_cw_hits = cw_pur_ctr_v[mcclus_id] ;
                }
              }
	          else {
	            auto mcclus_id = ass_mcclus_v.size() ;
                pur_ctr_v[mcclus_id]++ ; 
                cw_pur_ctr_v[mcclus_id] += h.Integral() ; 
                if( pur_ctr_v[mcclus_id] > max_hits ){
                  max_hits = pur_ctr_v[mcclus_id];
                  max_cid = mcclus_id ; 
                  max_cw_hits = cw_pur_ctr_v[mcclus_id] ;
                }
	          }
            }

            if ( max_cid != ass_mcclus_v.size() && max_cid != -1){

              auto tot_mc_hits =  ass_mcclus_v[max_cid].size(); 
              auto tot_reco_hits = ass_imageclus_v[clus_id].size();
              
              purity   = float(max_hits) / tot_reco_hits ;
              complete = float(max_hits) / tot_mc_hits ;
              cw_purity   = float(max_cw_hits) / tot_reco_cw_hits ;
              cw_complete = float(max_cw_hits) / tot_mc_cw_hits_v[max_cid]; 

              auto mcclus = ev_mcc->at(max_cid) ;
              ts_index = mcclus.Width();            // width set to carry mct/s index
              pi0_type   = mcclus.StartOpeningAngle() ; // opening angle set to track (0) or shower(1) in mccluster builder

              if( pi0_type == 0 )
                pi0_origin = ev_mct->at(ts_index).Origin(); 
              else{
                auto mcs = ev_mcs->at(ts_index) ;
                pi0_origin = mcs.Origin(); 
              }
            }


            auto ishr = ev_s->at(i);

            if ( i == 0 ){
              if ( lowE_is_shr1 ){ 
               _pi0_low_purity = purity ;
               _pi0_low_complete = complete;
	           _pi0_low_st_x = ishr.ShowerStart().X();
	           _pi0_low_st_y = ishr.ShowerStart().Y();
	           _pi0_low_st_z = ishr.ShowerStart().Z();
	           _pi0_low_origin = pi0_origin;
	           _pi0_low_type = pi0_type;

                if ( ts_index != -1 ){
                  _pi0_low_mother_pdg = pi0_type == 1 ? ev_mcs->at(ts_index).MotherPdgCode() : ev_mct->at(ts_index).MotherPdgCode() ; 
                  _pi0_low_pdg = pi0_type == 1 ? ev_mcs->at(ts_index).PdgCode() : ev_mct->at(ts_index).PdgCode() ; 
	          _pi0_low_from_pi0 = _pi0_low_mother_pdg == 111 ? 1 : 0 ;
		}

	           if ( _pi0_low_type == 1 ){
                 auto mcs = ev_mcs->at(ts_index) ;
	             _pi0_low_true_st_x = mcs.DetProfile().X() ;
	             _pi0_low_true_st_y = mcs.DetProfile().Y() ;
	             _pi0_low_true_st_z = mcs.DetProfile().Z() ;
	             _pi0_low_true_gammaE = mcs.Start().E() ;
                 _pi0_low_true_detProf_gammaE = mcs.DetProfile().E() ;
	           }
             }
             else{
               _pi0_high_purity = purity;
               _pi0_high_complete = complete;
	           _pi0_high_st_x = ishr.ShowerStart().X();
	           _pi0_high_st_y = ishr.ShowerStart().Y();
	           _pi0_high_st_z = ishr.ShowerStart().Z();
	           _pi0_high_origin = pi0_origin;
	           _pi0_high_type = pi0_type;

                if ( ts_index != -1 ){
                  _pi0_high_mother_pdg = pi0_type == 1 ? ev_mcs->at(ts_index).MotherPdgCode() : ev_mct->at(ts_index).MotherPdgCode() ; 
                  _pi0_high_pdg = pi0_type == 1 ? ev_mcs->at(ts_index).PdgCode() : ev_mct->at(ts_index).PdgCode() ; 
	          _pi0_high_from_pi0 = _pi0_high_mother_pdg == 111 ? 1 : 0 ;
	        }

	           if ( _pi0_high_type == 1){
                 auto mcs = ev_mcs->at(ts_index) ;
	             _pi0_high_true_st_x = mcs.DetProfile().X() ;
	             _pi0_high_true_st_y = mcs.DetProfile().Y() ;
	             _pi0_high_true_st_z = mcs.DetProfile().Z() ;
	             _pi0_high_true_gammaE = mcs.Start().E() ;
                 _pi0_high_true_detProf_gammaE = mcs.DetProfile().E() ;
	           }
             }
           }
           else if ( i == 1) {

             if ( !lowE_is_shr1 ){ 
               _pi0_low_purity = purity ;
               _pi0_low_complete = complete;
	           _pi0_low_st_x = ishr.ShowerStart().X();
	           _pi0_low_st_y = ishr.ShowerStart().Y();
	           _pi0_low_st_z = ishr.ShowerStart().Z();
	           _pi0_low_origin = pi0_origin;
	           _pi0_low_type = pi0_type;

                   if ( ts_index != -1 ){
                     //std::cout<<"ts_index: "<<ts_index<<", "<<ev_mcs->size()<<", "<<ev_mct->size()<<std::endl;
                     _pi0_low_mother_pdg = pi0_type == 1 ? ev_mcs->at(ts_index).MotherPdgCode() : ev_mct->at(ts_index).MotherPdgCode() ; 
                     _pi0_low_pdg = pi0_type == 1 ? ev_mcs->at(ts_index).PdgCode() : ev_mct->at(ts_index).PdgCode() ; 
	             _pi0_low_from_pi0 = _pi0_low_mother_pdg == 111 ? 1 : 0 ;
		   }

	           if ( _pi0_low_type == 1 ){
                 auto mcs = ev_mcs->at(ts_index) ;
	             _pi0_low_true_st_x = mcs.DetProfile().X() ;
	             _pi0_low_true_st_y = mcs.DetProfile().Y() ;
	             _pi0_low_true_st_z = mcs.DetProfile().Z() ;
	             _pi0_low_true_gammaE = mcs.Start().E() ;
                 _pi0_low_true_detProf_gammaE = mcs.DetProfile().E() ;
	           }
             }
             else{

               _pi0_high_purity = purity;
               _pi0_high_complete = complete;
	           _pi0_high_st_x = ishr.ShowerStart().X();
	           _pi0_high_st_y = ishr.ShowerStart().Y();
	           _pi0_high_st_z = ishr.ShowerStart().Z();
	           _pi0_high_origin = pi0_origin;
	           _pi0_high_type = pi0_type;


                if ( ts_index != -1 ){
                  _pi0_high_mother_pdg = pi0_type == 1 ? ev_mcs->at(ts_index).MotherPdgCode() : ev_mct->at(ts_index).MotherPdgCode() ; 
                  _pi0_high_pdg = pi0_type == 1 ? ev_mcs->at(ts_index).PdgCode() : ev_mct->at(ts_index).PdgCode() ; 
	          _pi0_high_from_pi0 = _pi0_high_mother_pdg == 111 ? 1 : 0 ;
	        }

	           if ( _pi0_high_type == 1){
                 auto mcs = ev_mcs->at(ts_index) ;
	             _pi0_high_true_st_x = mcs.DetProfile().X() ;
	             _pi0_high_true_st_y = mcs.DetProfile().Y() ;
	             _pi0_high_true_st_z = mcs.DetProfile().Z() ;
	             _pi0_high_true_gammaE = mcs.Start().E() ;
                 _pi0_high_true_detProf_gammaE = mcs.DetProfile().E() ;
	           }
             }
           }
         } 

         auto sce_corr_l = _SCE->GetPosOffsets(_pi0_low_true_st_x,_pi0_low_true_st_y,_pi0_low_true_st_z);
         auto sce_corr_h = _SCE->GetPosOffsets(_pi0_high_true_st_x,_pi0_high_true_st_y,_pi0_high_true_st_z);

         _pi0_low_true_st_x += vtxtimecm + 0.7 - sce_corr_l.at(0);
         _pi0_low_true_st_y += sce_corr_l.at(1);
         _pi0_low_true_st_z += sce_corr_l.at(2);
         
         _pi0_high_true_st_x += vtxtimecm + 0.7 - sce_corr_h.at(0);
         _pi0_high_true_st_y += sce_corr_h.at(1);
         _pi0_high_true_st_z += sce_corr_h.at(2);

         if ( _bkgd_id == 2 && _pi0_low_origin != 2 && _pi0_high_origin != 2 )
           _signal = true;
         }
       }

       if ( _get_single_shower_info ){
         auto ev_s = storage->get_data<event_shower>("pi0_1gamma_candidate_showers");
         if ( !ev_s ) return false;

         // Get the association from shower -> cluster
         auto ev_ass_s = storage->get_data<larlite::event_ass>("pi0_1gamma_candidate_showers");
         auto const& ass_showerreco_v = ev_ass_s->association(ev_s->id(), ev_clus->id());

         // Loop over clusters associated to this single shower sample candidate shower
         for (size_t j = 0; j < ass_showerreco_v.at(0).size(); j++ ){

           auto clus_id = ass_showerreco_v.at(0).at(j); 
           auto iclus = ev_clus->at(clus_id);
           
           int plane = iclus.Plane().Plane ;
           if ( plane != 2 ) continue;

           pur_ctr_v.clear();
           cw_pur_ctr_v.clear();
           pur_ctr_v.resize(ass_mcclus_v.size()+1,0) ;
           cw_pur_ctr_v.resize(ass_mcclus_v.size()+1,0) ;

           max_hits = -1;
           max_cw_hits = -1;
           max_cid = -1 ;
           tot_reco_cw_hits = 0;
           
           // Loop through all hits associared to the cluster 
           for ( int k = 0; k < ass_imageclus_v.at(clus_id).size(); k++ ){

             auto hid = ass_imageclus_v.at(clus_id).at(k) ; 
             auto h = ev_hit->at(hid);
             tot_reco_cw_hits += h.Integral() ;
             
             if ( _mc_hit_map.find(hid) != _mc_hit_map.end() ){

               auto mcclus_id = _mc_hit_map[hid] ;

               pur_ctr_v[mcclus_id]++ ; 
               cw_pur_ctr_v[mcclus_id] += h.Integral() ; 

               if( pur_ctr_v[ mcclus_id] > max_hits ){
                 max_hits = pur_ctr_v[mcclus_id];
                 max_cid = mcclus_id ; 
                 max_cw_hits = cw_pur_ctr_v[mcclus_id] ;
               }
             }
	         else {
	           auto mcclus_id = ass_mcclus_v.size() ;
               pur_ctr_v[mcclus_id]++ ; 
               cw_pur_ctr_v[mcclus_id] += h.Integral() ; 
               if( pur_ctr_v[mcclus_id] > max_hits ){
                 max_hits = pur_ctr_v[mcclus_id];
                 max_cid = mcclus_id ; 
                 max_cw_hits = cw_pur_ctr_v[mcclus_id] ;
               }
	         }
           }

           if ( max_cid != ass_mcclus_v.size() && max_cid != -1){

             auto tot_mc_hits =  ass_mcclus_v[max_cid].size(); 
             auto tot_reco_hits = ass_imageclus_v[clus_id].size();
             
             _gamma_purity   = float(max_hits) / tot_reco_hits ;
             _gamma_complete = float(max_hits) / tot_mc_hits ;
             _gamma_cw_purity   = float(max_cw_hits) / tot_reco_cw_hits ;
             _gamma_cw_complete = float(max_cw_hits) / tot_mc_cw_hits_v[max_cid]; 

             auto mcclus = ev_mcc->at(max_cid) ;

             _gamma_type   = mcclus.StartOpeningAngle() ; // opening angle set to track (0) or shower(1) in mccluster builder
             int gamma_index = mcclus.Width();            // width set to carry mct/s index

             if( _gamma_type == 0 ){
               auto mct = ev_mct->at(gamma_index) ;
               _gamma_origin = mct.Origin(); 
               _gamma_mother_pdg = mct.MotherPdgCode() ; 
               _gamma_pdg = mct.PdgCode() ; 
             }
             else{
               auto mcs = ev_mcs->at(gamma_index) ;
               _gamma_origin = mcs.Origin(); 
               _gamma_mother_pdg = mcs.MotherPdgCode() ; 
               _gamma_pdg = mcs.PdgCode() ; 
               _gamma_from_pi0 = _gamma_mother_pdg == 111 ? 1 : 0 ;
               _gamma_trueE_detProf = mcs.DetProfile().E();
               _gamma_trueE = mcs.Start().E() ;
              }

             if ( _bkgd_id == 2 && _gamma_origin != 2 )
               _signal = true;
           }
         }
       }
     }

     if ( _get_pi0_info ){

      auto ev_s = storage->get_data<event_shower>("pi0_candidate_showers");
      if( !ev_s || !ev_s->size() ){
        std::cout<<"Not enough reco'd showers..." <<std::endl;
        return false;
       }   

      auto const& shr1 = ev_s->at(0) ;
      auto const& shr2 = ev_s->at(1);

      geoalgo::Vector_t rev_shr1(-1.*shr1.Direction()) ;
      geoalgo::Vector_t rev_shr2(-1.*shr2.Direction()) ;

      // Make the backwards projection for the showers
      auto shr1_bkwrd_hl = ::geoalgo::HalfLine_t(shr1.ShowerStart(),rev_shr1);
      auto shr2_bkwrd_hl = ::geoalgo::HalfLine_t(shr2.ShowerStart(),rev_shr2);

      ::geoalgo::Point_t temp_vertex(vtx.X(),vtx.Y(),vtx.Z());
      auto shr1_IP_w_vtx = _geoAlgo.SqDist(temp_vertex, shr1_bkwrd_hl) ;
      auto shr2_IP_w_vtx = _geoAlgo.SqDist(temp_vertex, shr2_bkwrd_hl) ;
      auto IP = pow(_geoAlgo.SqDist(shr1_bkwrd_hl,shr2_bkwrd_hl),0.5);

      // Opening angle of the showers
      double oangle = acos( shr1.Direction().Dot(shr2.Direction())) ;

      // Vertex point of the two showers. the true designated backwards project
      geoalgo::Point_t vertex(3);

      auto st1 = shr1.ShowerStart();
      auto st2= shr2.ShowerStart();
      auto dir1 = shr1.Direction();
      auto dir2 = shr2.Direction();
      geoalgo::HalfLine_t shr1_hl(st1.X(),st1.Y(),st1.Z(),dir1.X(),dir1.Y(), dir1.Z() );
      geoalgo::HalfLine_t shr2_hl(st2.X(),st2.Y(),st2.Z(),dir2.X(),dir2.Y(), dir2.Z() );

      _geoAlgo.commonOrigin(shr1_hl, shr2_hl, vertex, true);

      // CCNC Diretion of two correlated shower
      geoalgo::Vector_t momentum(3);// need to fill out
      geoalgo::Vector_t mom_vect(shr2.Direction()*shr1.Energy(2) +shr1.Direction()*shr2.Energy(2)) ;

      auto tot_pi0_mom = sqrt(pow(mom_vect[0],2) + pow(mom_vect[1],2) + pow(mom_vect[2],2) );
      auto radL_shr1 = vertex.Dist(shr1.ShowerStart());
      auto radL_shr2 = vertex.Dist(shr2.ShowerStart());

      _pi0_mass      = sqrt(2 * shr1.Energy(2) * shr2.Energy(2) *(1.-cos(oangle)));
      _pi0_mom       = tot_pi0_mom;
      _pi0_oangle    = oangle;
      _pi0_IP        = IP ;
      _pi0_low_shrE  = shr1.Energy(2) < shr2.Energy(2) ? shr1.Energy(2) : shr2.Energy(2) ;
      _pi0_high_shrE = shr1.Energy(2) < shr2.Energy(2) ? shr2.Energy(2) : shr1.Energy(2) ;
      _pi0_low_radL  = shr1.Energy(2) < shr2.Energy(2) ? radL_shr1 : radL_shr2 ;
      _pi0_high_radL = shr1.Energy(2) < shr2.Energy(2) ? radL_shr2 : radL_shr1 ;
      _pi0_high_IP_w_vtx = shr1.Energy(2) < shr2.Energy(2) ? shr2_IP_w_vtx : shr1_IP_w_vtx ;
      _pi0_low_IP_w_vtx  = shr1.Energy(2) < shr2.Energy(2) ? shr1_IP_w_vtx : shr2_IP_w_vtx ;

    }
 
    if ( _get_single_shower_info ){
      auto ev_s = storage->get_data<event_shower>("pi0_1gamma_candidate_showers");
      if ( !ev_s ) return false;

      geoalgo::Point_t vertex(3);
      vertex[0] = vtx.X();
      vertex[1] = vtx.Y();
      vertex[2] = vtx.Z();

      geoalgo::Vector_t rev_shr1(-1.*ev_s->at(0).Direction()) ;
      auto shr1_bkwrd_hl = ::geoalgo::HalfLine_t(ev_s->at(0).ShowerStart(),rev_shr1);

      _gamma_E = ev_s->at(0).Energy(2); 
      _gamma_RL = vertex.Dist(ev_s->at(0).ShowerStart());
      _gamma_IP_w_vtx = _geoAlgo.SqDist(vertex, shr1_bkwrd_hl) ;
    }

    if ( _get_genie_info ) {

      auto ev_wgt= storage->get_data<event_mceventweight>(_eventweight_producer);

      if( !ev_wgt || !ev_wgt->size() ){
        std::cout<<"No event weights..." <<std::endl;
        return false;
      }

      auto wgt  = ev_wgt->at(0).GetWeights();

      if ( _eventweight_producer == "genieeventweight" ){
        int it = 0;
        for ( auto const & m : wgt ) {
           auto w_v = m.second ;
           _sel_evts_p1[it] = (w_v.at(0)) ;
           _sel_evts_m1[it] = (w_v.at(1)) ;
           it++;
        }
      }
      else{

        auto wgt  = ev_wgt->at(0).GetWeights();

        std::vector<float> b_unisim_tot_weight(1000,1);
        std::vector<float> s_unisim_tot_weight(1000,1);
  
        // Rewrite with a map
        for ( auto const & m : wgt ) { 

          for ( int jj = 0; jj < m.second.size(); jj++){
            // These are the 5 hadron values -- they may be correlated. Vary these 5 individually.
            if ( find(_unisim_label_v.begin(),_unisim_label_v.end(),m.first) != _unisim_label_v.end() ){
                if (_signal )
                  s_unisim_tot_weight[jj] *= m.second.at(jj) ;
                else
                  b_unisim_tot_weight[jj] *= m.second.at(jj) ;
            }   
            else{
              if (_signal)
                _s_weights_by_universe[_label_map[m.first]][jj] += m.second.at(jj);
              else
                _b_weights_by_universe[_label_map[m.first]][jj] += m.second.at(jj);
            }   
          }   
        }   
        for ( int jj = 0; jj < 1000; jj++){
          if(_signal)
          _s_weights_by_universe[0][jj] += s_unisim_tot_weight[jj] ;
          else
          _b_weights_by_universe[0][jj] += b_unisim_tot_weight[jj] ;
        }   
      }
    }

    if ( ev_shr ){ 

      int shr_it = 0;

      for ( auto const & s : *ev_shr ){
        if ( s.Energy(2) > 1e-30 )
	      shr_it++ ; 
      }
      _nshrs = shr_it;
    } 
    
     
    if ( ev_shr->size() != 0 ){
      auto geomH = ::larutil::GeometryHelper::GetME();

      auto const & ev_clus = storage->get_data<event_cluster>("ImageClusterHit");
      auto const & ev_ass_c = storage->get_data<larlite::event_ass>("ImageClusterHit");
      auto const & ass_imageclus_v = ev_ass_c->association(ev_clus->id(), ev_hit->id());

      auto ev_ass_s = storage->get_data<larlite::event_ass>("showerreco");
      auto const& ass_showerreco_v = ev_ass_s->association(ev_shr->id(), ev_clus->id());

      // Loop over all showers in this event
      //std::cout<<" ass shower size: "<<ass_showerreco_v.size() <<", "<<ev_shr->size()<<std::endl ;
      for (size_t i = 0; i < ass_showerreco_v.size(); i++ ){

        auto s = ev_shr->at(i);
        if ( s.Energy(2) <= 1e-30 ){ continue ; }
            
        _shr_startx = s.ShowerStart().X();
        _shr_starty = s.ShowerStart().Y();
        _shr_startz = s.ShowerStart().Z();

        std::vector<float> shr_to_proj = { _shr_startx, _shr_starty, _shr_startz } ;
        auto shr2d = geomH->Point_3Dto2D(shr_to_proj,2) ;
        _shr_startw = shr2d.w ;
        _shr_startt = shr2d.t ;

        _shr_dirx = s.Direction().X();
        _shr_diry = s.Direction().Y();
        _shr_dirz = s.Direction().Z();

        _shr_energy = s.Energy(2);
        _shr_oangle = s.OpeningAngle();
        _shr_dedx = s.dEdx(2);

        _shr_vtx_dist = sqrt( pow(_vtx_x - _shr_startx,2) + pow(_vtx_y - _shr_starty,2) + pow(_vtx_z - _shr_startz,2) ); 
        _shr_trk_delta_theta = s.Direction().Theta() - _mu_angle;
        _shr_trk_delta_phi = s.Direction().Phi() - _mu_phi ;

        if ( _mc_sample ) {

          auto ev_mct = storage->get_data<event_mctrack>("mcreco");
          if ( !ev_mct || !ev_mct->size() ) {std::cout<<"No MCTrack!" <<std::endl ; return false; }

          auto ev_mcs = storage->get_data<event_mcshower>("mcreco") ;
          if ( !ev_mcs || !ev_mcs->size() ) {std::cout<<"No MCShower!" <<std::endl ; return false; }

          // Now get Mccluster info
          auto ev_ass = storage->get_data<larlite::event_ass>("mccluster");
          auto const& ass_keys = ev_ass->association_keys();

          if ( ass_keys.size() == 0 ) return false; 

          larlite::event_cluster *ev_mcclus = nullptr;
          auto ass_hit_clus_v = storage->find_one_ass( ass_keys[0].first, ev_mcclus, ev_ass->name() );

          larlite::event_hit *ev_mchit = nullptr;
          auto ass_mcclus_v = storage->find_one_ass( ass_keys[0].second, ev_mchit, ev_ass->name() );

          auto ev_mcc = storage->get_data<event_cluster>("mccluster");

          // Loop over clusters associated to this shower
          for (size_t j = 0; j < ass_showerreco_v.at(i).size(); j++ ){

            auto clus_id = ass_showerreco_v.at(i).at(j); 
            auto iclus = ev_clus->at(clus_id);
            
            int plane = iclus.Plane().Plane ;
            if ( plane != 2 ) continue;

            pur_ctr_v.clear();
            pur_ctr_v.resize(ass_mcclus_v.size()+1,0) ;

            int max_hits = -1;
            int max_cid = -1 ;

            // Loop through all hits associared to the cluster 
            for ( int k = 0; k < ass_imageclus_v.at(clus_id).size(); k++ ){

              auto hid = ass_imageclus_v.at(clus_id).at(k) ; 
              auto h = ev_hit->at(hid);
              
              if ( _mc_hit_map.find(hid) != _mc_hit_map.end() ){

                auto mcclus_id = _mc_hit_map[hid] ;

                pur_ctr_v[mcclus_id]++ ; 

                if( pur_ctr_v[ mcclus_id] > max_hits ){
                  max_hits = pur_ctr_v[mcclus_id];
                  max_cid = mcclus_id ; 
                }
              }
	          else {
	            auto mcclus_id = ass_mcclus_v.size() ;
                pur_ctr_v[mcclus_id]++ ; 
                if( pur_ctr_v[mcclus_id] > max_hits ){
                  max_hits = pur_ctr_v[mcclus_id];
                  max_cid = mcclus_id ; 
                }
	          }
            }

            if ( max_cid != ass_mcclus_v.size() && max_cid != -1 ){

              auto tot_mc_hits =  ass_mcclus_v[max_cid].size(); 
              auto tot_reco_hits = ass_imageclus_v[clus_id].size();
              
              _shr_purity   = float(max_hits) / tot_reco_hits ;
              _shr_complete = float(max_hits) / tot_mc_hits ;

              auto mcclus = ev_mcc->at(max_cid) ;
              _shr_type   = mcclus.StartOpeningAngle() ; // set opening angle to track (0) or shower(1) in mccluster builder
              auto shr_index = mcclus.Width() ;          // index of track or shower  

              if( _shr_type == 0 ){
                auto mct = ev_mct->at(shr_index) ;
                _shr_origin = mct.Origin(); 
                _shr_mother_pdg = mct.MotherPdgCode() ; 
                _shr_pdg = mct.PdgCode() ; 
              }
              else{
                auto mcs = ev_mcs->at(shr_index) ;
                _shr_origin = mcs.Origin(); 
                _shr_pdg = mcs.PdgCode() ; 
                _shr_mother_pdg = mcs.MotherPdgCode() ; 
                _shr_from_pi0 = _shr_mother_pdg == 111 ? 1 : 0 ;
                _shr_trueE = mcs.Start().E() ;
                _shr_trueE_detProf = mcs.DetProfile().E();
               }
            }

            if( _shr_type == -999 ) _n_shr_noise++;
            else if ( _shr_origin == 2 ) _n_shr_cosmic ++ ;
            else if ( _shr_origin == 1 && _shr_type == 0 ) _n_shr_nutrk++;
            else if ( _shr_origin == 1 && _shr_type == 1 && _shr_from_pi0 == 0 ) _n_shr_nushr++; 
            else if ( _shr_origin == 1 && _shr_type == 1 && _shr_from_pi0 == 1 ) _n_shr_pi0++; 

          }
        }
        _shower_tree->Fill() ;
      }
    }
    _tree->Fill();    

    return true;
  }

  bool BackgroundTruthMatchBT::finalize() {

    std::cout<<"Signals: "<<_signal<<std::endl ;
    std::cout<<"Total CCpi0 : "<<_n_cc1pi0<<std::endl; 

    // Note that cc other includes secondary pi0s.
    std::cout<<"\nBackgrounds: "<<std::endl;
    std::cout<<"0) Noise : "<<_n_noise<< std::endl;
    std::cout<<"1) Cosmic : "<<_n_cosmic<< std::endl;
    std::cout<<"2) CC 1pi0 : "<<_n_cc1pi0<<std::endl;
    std::cout<<"3) NC 1pi0 : "<<_n_nc1pi0<<std::endl;
    std::cout<<"4) CC 1pi0 out FV: "<<_n_cc1pi0_outFV<<std::endl;
    std::cout<<"5) CC mult pi0: "<<_n_multpi0<<std::endl;
    std::cout<<"6) Nue: "<<_n_nue<<std::endl;
    std::cout<<"7) Antinumu: "<<_n_antimu<<std::endl;
    std::cout<<"8) CC Cex: "<<_n_cccex<<std::endl;
    std::cout<<"9) NC Cex: "<<_n_nccex<<std::endl;
    std::cout<<"10) CC Gamma : "<<_n_gamma<<std::endl;
    std::cout<<"11) Kaon Decay: "<<_n_kaondecay<<std::endl;
    std::cout<<"12) CC Other : "<<_n_ccother<<std::endl;
    std::cout<<"13) NC Other : "<<_n_ncother<<std::endl;
    std::cout<<"14) Other: "<<_n_other<< std::endl;

    std::cout<<"ONLY 1 GAMMA!!! "<<_1gamma<<std::endl;
    auto funcs = 6; 
    float dataPOT = 0.492;
    float mcbnbcos_POT = 4.23214; 
    float mc_to_onbeam = dataPOT/mcbnbcos_POT;

    if ( _get_genie_info ){
      for( int i = 0; i < funcs; i++){
        std::cout<<"FLUX! "<<_flux_by_universe[i][0]<<std::endl ;
        for( int j= 0; j < 1000; j++){
          float eff = _s_weights_by_universe[i][j] / _t_weights_by_universe[i][j] ;
          _xsec_v[i][j] = float( _N -  mc_to_onbeam*_b_weights_by_universe[i][j])/eff/ _flux_by_universe[i][j]/(8.855e+29);
          _perc_v[i][j] = ( _xsec_v[i][j] - _N_xsec )/ _N_xsec *100;
        }
      }

      _univ->Fill();
    }

    if ( _fout ){
      _fout->cd();
      _tree->Write();
      _univ->Write();
      _shower_tree->Write();
    }
  
    return true;
  }

}
#endif
